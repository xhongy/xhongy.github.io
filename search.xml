<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过bintray-release，发布库到Jcenter</title>
    <url>/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/</url>
    <content><![CDATA[<blockquote>
<p>android开发时有时候需要用到一些第三方的库，只需要<strong>implementation ‘com.orhanobut:logger:2.2.0’</strong>,简单的一条语句引入即可，是不是感觉好神奇。<br>现在很多时候开发都是组件化的模式，如果能把公共部分做成开源库供大家使用那就方便多了，加下来我就以上传android的一个moudule为例一步一步教大家如何来操作。</p>
</blockquote>
<p>本文是通过bintray-release 来操作的，先了解一下bintray-release是什么？</p>
<ul>
<li>bintray-release是github上的一个开源工程库。</li>
<li>bintray-release提供了将您的Android或者其他作品推送到Bintray的简便方案。</li>
<li>bintray-release是帮助将类库推送到bintray的助手。 它用来帮助配置与maven和bintray建立联系。 目前它用于Android Library工程，Java项目以及Groovy项目，但其重点主要是用来支持Android项目。</li>
</ul>
<p><strong>接下来开始美妙的编程时刻吧！LET’S GO!!</strong></p>
<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>在AndroidStudio上建android Project，然后新建一个module，结果如下<br><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/new-pro-suc.png"  alt></p>
<h3 id="调试module"><a href="#调试module" class="headerlink" title="调试module"></a>调试module</h3><p>接下来编写新建的module块代码，并将此module作为app模块的依赖，调试成功。<br>这里仅仅添加一条打印日志</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/module-class.png"  alt></p>
<h3 id="module代码上传github"><a href="#module代码上传github" class="headerlink" title="module代码上传github"></a>module代码上传github</h3><p> 将调试成功的module块代码上传到github仓库(代码中转库)<br>此步骤可参考另一篇相关帖子,</p>
<blockquote>
<p><a href="https://xhongy.github.io/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/">github上传文件</a></p>
</blockquote>
<h3 id="module上传jcenter"><a href="#module上传jcenter" class="headerlink" title="module上传jcenter"></a>module上传jcenter</h3><p><strong>关键步骤，要放大招了</strong></p>
<h4 id="注册bintray账号"><a href="#注册bintray账号" class="headerlink" title="注册bintray账号"></a>注册bintray账号</h4><p>这里是通过bintray-release中转站，没有bintray账号的先注册一个账号</p>
<blockquote>
<p><a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">注册地址</a><br>可以直接注册或者通过Github帐号注册。具体步骤自行操作，不做过多讲述了。</p>
</blockquote>
<h4 id="bintray新建仓库"><a href="#bintray新建仓库" class="headerlink" title="bintray新建仓库"></a>bintray新建仓库</h4><p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/new-repository.png"  alt></p>
<p>点击<strong>Add New Repository</strong>，进入新建仓库配置页面</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/info-repository.png"  alt></p>
<h3 id="获取API-KEY"><a href="#获取API-KEY" class="headerlink" title="获取API-KEY"></a>获取API-KEY</h3><p>获取API KEY，在头像下选择 Edit Profile 进入新页面可以看到API KEY然后复制保存备用；</p>
<p>可以点击show查看key或者直接点击右侧的复制按钮复制</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/get-api-key.png"  alt></p>
<p>到此，所有的准备功能已经准备完毕！接下来就要进入到ANDROID STUDIO 中进行代码的一些配置；</p>
<h3 id="AndroidStudio代码配置"><a href="#AndroidStudio代码配置" class="headerlink" title="AndroidStudio代码配置"></a>AndroidStudio代码配置</h3><h4 id="工程-根目录-build-gradle中添加"><a href="#工程-根目录-build-gradle中添加" class="headerlink" title="工程(根目录)build.gradle中添加"></a>工程(根目录)build.gradle中添加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        jcenter()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath <span class="string">'com.novoda:bintray-release:0.8.1'</span> // 添加</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="在待发布的module中的build-gradle添加"><a href="#在待发布的module中的build-gradle添加" class="headerlink" title="在待发布的module中的build.gradle添加"></a>在待发布的module中的build.gradle添加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.novoda.bintray-release'</span></span><br><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'yourUserName'</span>                 //bintray注册的用户名</span><br><span class="line">    groupId = <span class="string">'com.github.sunrise'</span>           //compile引用时的第1部分</span><br><span class="line">    artifactId = <span class="string">'Test'</span>                      //compile引用时的第2部分                                     </span><br><span class="line">    publishVersion = <span class="string">'1.0.0'</span>                 //版本号</span><br><span class="line">    repoName = yourRepositoryName         //你要上传至bintray仓库的名称，如果仓库名称是maven可忽略</span><br><span class="line">    desc = <span class="string">'anything you want'</span>               //描述</span><br><span class="line">    website = <span class="string">'anything you want'</span>            //网站</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="上传到bintray"><a href="#上传到bintray" class="headerlink" title="上传到bintray"></a>上传到bintray</h4><p> 在androidStudio的Terminal中输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew clean build bintrayUpload -PbintrayUser=yourUserName -PbintrayKey=yourAPIKEY -PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>文中的yourUserName替换为你注册binary的用户名，yourAPIKEY替换为你的key.</p>
</blockquote>
<p>稍后出现BUILD SUCCESSFUL即上传成功<br><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/gradlew-suc.png"  alt></p>
<p>截止到此时，我们已经成功的把module 上传到了 bintray 的 Respository中。</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/bintray-new-rep.png"  alt></p>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>此时若要引用此库，需要在项目根build.gradle文件下加入想要的maven库依赖</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/lib-use.png"  alt></p>
<p>在需要引用的库里添加想要的implenmention</p>
<h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><p>若开放给别人使用每次都添加maven依赖是不是太麻烦，那就需要同步到Jcenter，操作如下图，耐心等待审核(注：版本升级不用再次同步到Jcenter)</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/add-to-jcenter.png"  alt></p>
<p>等待审核通过，就ok了！！</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E9%80%9A%E8%BF%87bintray-release%EF%BC%8C%E5%8F%91%E5%B8%83%E5%BA%93%E5%88%B0Jcenter/end.png"  alt><br>这是在项目中只通过implemention来使用就ok</p>
<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h4 id="错误-编码GBK的不可映射字符。"><a href="#错误-编码GBK的不可映射字符。" class="headerlink" title="错误: 编码GBK的不可映射字符。"></a>错误: 编码GBK的不可映射字符。</h4><p>解决办法：在项目根build.gradle中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    &#x2F;&#x2F;编译时报注释GBK编码错误解决</span><br><span class="line">    tasks.withType(Javadoc) &#123;</span><br><span class="line">        options.addStringOption(&#39;encoding&#39;, &#39;UTF-8&#39;)</span><br><span class="line">        options.addStringOption(&#39;charSet&#39;, &#39;UTF-8&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="return或-param不能为空"><a href="#return或-param不能为空" class="headerlink" title="@return或@param不能为空"></a>@return或@param不能为空</h4><p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    &#x2F;&#x2F;编译时报注释GBK编码错误解决</span><br><span class="line">    tasks.withType(Javadoc) &#123;</span><br><span class="line">        &#x2F;&#x2F;方法上忽略@return和@param注解未添加说明注释</span><br><span class="line">        options.addStringOption(&#39;Xdoclint:none&#39;, &#39;-quiet&#39;)</span><br><span class="line">        &#x2F;&#x2F;解决GBK编码错误提示</span><br><span class="line">        options.addStringOption(&#39;encoding&#39;, &#39;UTF-8&#39;)</span><br><span class="line">        options.addStringOption(&#39;charSet&#39;, &#39;UTF-8&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><p>如果需要更新升级的时候，更新完代码只需要把module里面的publishVersion更新到自己的版本<br>如1.0.0 —-&gt;1.0.1<br>然后在次执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew clean build bintrayUpload -PbintrayUser=xxx -PbintrayKey=xxx -PdryRun=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>那么在引入的时候改变版本号即可使用最新代码。</p>
<blockquote>
<p>注意：第一次上传的时候需要add to jcenter, 后面更新只需要在命令行提交到bintary即可。</p>
</blockquote>
<h3 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h3><p>在使用中有可能会出现各种问题，可参考<br><a href="https://www.jianshu.com/p/6b272fe9bd28" target="_blank" rel="noopener">转载</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>jcenter</tag>
        <tag>marven</tag>
        <tag>bintray</tag>
      </tags>
  </entry>
  <entry>
    <title>断点续传</title>
    <url>/2020/04/19/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="什么是断点续传："><a href="#什么是断点续传：" class="headerlink" title="什么是断点续传："></a>什么是断点续传：</h3><blockquote>
<p>说得白一点，<em>其实也</em>就是下载文件时，不必重头开始下载，而是从指定的位置继续下载，这样的功能就叫做断点续传。<br>既然如此，那么要实现断点续传的关键点其实也就是两点：</p>
</blockquote>
<ul>
<li>如何告知服务端，从指定的位置下载</li>
<li>如何知道客户端想要的指定位置是多少</li>
</ul>
<p>其实，很简单，并不需要我们自己去写一些什么，HTTP 协议本身就支持断点续传，<br>而且文件是下载到客户端设备上的，那么只要获取到这份下载到一半的文件，<br>看一下它目前的大小，也就知道需要让服务端从哪开始继续下载了。</p>
<p>那么，下面就介绍一下涉及到的相关理论</p>
<h3 id="Range-amp-Content-Length-amp-Content-Range-amp-If-Range"><a href="#Range-amp-Content-Length-amp-Content-Range-amp-If-Range" class="headerlink" title="Range &amp; Content-Length &amp; Content-Range &amp; If-Range"></a>Range &amp; Content-Length &amp; Content-Range &amp; If-Range</h3><p>这些都是 HTTP 包中 Header 头部的一些字段信息，其中 Range 和 If-Range 是请求头中<br>其中 Range 和 If-Range 是请求头中的字段，Content-Length 和 Content-Range 是响应头中的字段。</p>
<h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>当请求头中出现 Range 字段时，表示告知服务端，客户端下载该文件想要从指定的位置开始下载，至于 Range 字段属性值的格式有以下几种：</p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Range:bytes&#x3D;0-500  表示下载从0到500字节的文件，即头500个字节</span><br><span class="line"></span><br><span class="line">Range:bytes&#x3D;501-1000  表示下载从500到1000这部分的文件，单位字节</span><br><span class="line"></span><br><span class="line">Range:bytes&#x3D;-500   表示下载最后的500个字节</span><br><span class="line"></span><br><span class="line">Range:bytes&#x3D;500-   表示下载从500开始到文件结束这部分的内容</span><br></pre></td></tr></table></figure>
<p>如果 app 想实现断点续传，文件下载到一半被迫中断，下次启动还可以继续接着上次<br>进度下载时，那么此时可以使用 Range:bytes=500- 这种格式了，只要先获取本地那<br>份文件目前的大小，通过在请求头中加入 Range 字段信息即可</p>
<h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>Content-Length 字段出现在响应头中，用于告知客户端此次下载的文件大小。</p>
<p>一般，如果客户端需要实现下载进度实时更新时，就需要知道文件的总大小和目前下载的大小，后者可以通过对本地文件的操作得知，前者一般就是通过响应头中的 Content-Length 字段得知。</p>
<p>另外，如果想要实现多线程同时分段下载大文件功能时，显然在下载前，客户端需要先知道文件总大小，才可以做到动态进行分段，因此一般在下载前都会先发送一个不需要携带 body 信息请求，用于先获取响应头中的 Content-Length 字段来得知文件总大小。</p>
<p>但有一点需要注意：Content-Length 只表示此链接中下载的文件大小</p>
<p>什么意思，也就是说，如果这条链接是一次性将整个文件下载下来的，那么 Content-Length 就表示这个文件的总大小。</p>
<p>但，如果这条链接指定了 Range，表明了只是下载文件的指定部分的内容，那么此时 Content-Length 表示的就只是这一部分的大小。</p>
<p>所以，如果客户端实现了下载进度实时更新功能时，需要注意一下。因为如果文件是断点续传的，那么进度条的分母就不能用每次 HTTP 链接中的 Content-Length。要么下载前先发一条获取用于文件总大小的请求，然后一直维护着这个数据，要么就使用 Content-Range 字段。</p>
<h4 id="Content-Range"><a href="#Content-Range" class="headerlink" title="Content-Range"></a>Content-Range</h4><p>Content-Range 字段也是出现在响应头中，用于告知客户端此链接下载的文件是哪个部分的，以及文件的总大小。<br>比如，当客户端在请求头中指定了 Range:bayes=501-1000 来下载一个总大小为 2000 字节文件的中间一部分内容时，此时，响应头中的 Content-Range 字段信息如下：<br>Content-Range:bytes 501-1000/2000<br>斜杠前表示此链接下载的文件是哪一部分，斜杠后表示文件的总大小。</p>
<h4 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h4><p>断点续传，说白点也就是分多次下载，既然不是一次性下载，那么就无法保证多次下载的间隔。<br>也就是说，有可能出现这种场景，这次由于某些原因只下载的一部分，而下次重启继续下载，但可能等到过了很多天后才重启去继续下载，如果在这期间，服务端的这份文件更新了怎么办？<br>只要不是一次性下载的，那么就有可能会出现这种场景，显然，这时候，就不希望断点续传了，而是要让客户端直接重头开始下载，毕竟文件都已经发生更新了，不是同一份了，再继续恢复下载也没有什么意义。<br>那么，客户端要如何知道服务端的文件是否发生变化，要重头下载呢？<br>这时就可以结合 If-Range 字段来实现了，这个也是在请求头中的字段，跟 Range 字段一起使用，它的作用是给 Range<br>字段生效设置了一些条件，只有满足这些条件，Range 才能生效。<br>也就是说，只有先满足 If-Range，那么才能通过 Range 来实现断点续传。<br>那它的条件值可以设置为哪些呢？有两种，Last-Modified 或者 ETag，这两个也都是响应头中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.header(&quot;Content-Length&quot;) &#x2F;&#x2F; 文件长度</span><br><span class="line">response.header(&quot;Last-Modified&quot;)  &#x2F;&#x2F; 修改时间</span><br><span class="line">response.header(&quot;ETag&quot;)      &#x2F;&#x2F;ETag标识</span><br></pre></td></tr></table></figure>

<h3 id="代码查看"><a href="#代码查看" class="headerlink" title="代码查看"></a>代码查看</h3><p>本人已采用okhttp框架实现了此功能，代码已上传至github，地址：</p>
<p><a href="https://github.com/xhongy/OkHttpLib" target="_blank" rel="noopener">https://github.com/xhongy/OkHttpLib</a></p>
<p>同时插件也上传了jcenter，想使用此插件的友友们，可以访问一下地址查看详情</p>
<p><a href="https://bintray.com/beta/#/xhongy/maven/OkHttpPlugin" target="_blank" rel="noopener">https://bintray.com/beta/#/xhongy/maven/OkHttpPlugin</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>断点续传</tag>
        <tag>okhttp</tag>
      </tags>
  </entry>
  <entry>
    <title>组件化</title>
    <url>/2020/04/21/%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<p>组件化： gradle 开发中<br>插件化： 动态化：反射、类加载 运行中</p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>java进阶</title>
    <url>/2020/04/22/java%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>元注解： 注解上的注解<br>Target ，如不知名Targer，注解可以作用在任何地方</p>
<blockquote>
<p>Element.TYPE  作用在类</p>
</blockquote>
<p>APT  Annotition Processor Tools 注解处理器,运行在编译阶段</p>
<p>.java由javac编译成-》.class</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发问题汇总</title>
    <url>/2020/04/24/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="gradle-不能同步相关包"><a href="#gradle-不能同步相关包" class="headerlink" title="gradle 不能同步相关包"></a>gradle 不能同步相关包</h2><p><strong>ERROR: Unable to resolve dependency for ‘:app@debugAndroidTest/compileClasspath..</strong><br>一看感觉应该是同步失败，查资料说是 gradle 的 offline work 放开就好了，但是近如gradle也没看到offline按钮在哪<br><img src="/" class="lazyload" data-src="/2020/04/24/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/gradle.png"  alt></p>
<p>废了好大劲才发现原来androidstudio3.6版本把这个功能移动到别的位置了<br><img src="/" class="lazyload" data-src="/2020/04/24/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/gradle-new.png"  alt><br>在这里关闭offline功能，完美解决问题</p>
<h2 id="Android-studio-3-0之后，打包后的apk都是安装失败"><a href="#Android-studio-3-0之后，打包后的apk都是安装失败" class="headerlink" title="Android studio 3.0之后，打包后的apk都是安装失败"></a>Android studio 3.0之后，打包后的apk都是安装失败</h2><p>我遇到的情况是这样的，AS2.3升级为3.0之后，改了些配置，然后能够直接通过通过绿色小箭头run到手机上没问题，后来将生成的apk包拷出来之后7.0系统的手机提示安装包损坏，找了好多解决方法，包括所说的签名问题，和回复的关闭instant run功能等，结果发现都是无法解决的，当时找到instant run马上回复了也没试试抱歉，因为自己刚好确实打开了这个设置项，所以不知道为啥，后来的解决方法是通过右边的Gradle project目录中选中Task/install/install_Debug打包成功apk并安装成功<br><img src="/" class="lazyload" data-src="/2020/04/24/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/android-install-fail.png"  alt></p>
<h2 id="androidstudio-logcat打印乱码"><a href="#androidstudio-logcat打印乱码" class="headerlink" title="androidstudio logcat打印乱码"></a>androidstudio logcat打印乱码</h2><ul>
<li><p>在Android Studio中点击Help—&gt;Edit Custom VM Options</p>
</li>
<li><p>然后在打开的文件中添加一句</p>
</li>
</ul>
<p>-Dfile.encoding=UTF-8</p>
<ul>
<li>然后重启Android Studio</li>
</ul>
<h2 id="You-need-to-use-a-Theme-AppCompat-theme-or-descendant-with-this-activity"><a href="#You-need-to-use-a-Theme-AppCompat-theme-or-descendant-with-this-activity" class="headerlink" title="You need to use a Theme.AppCompat theme (or descendant) with this activity."></a>You need to use a Theme.AppCompat theme (or descendant) with this activity.</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p>创建的activity时，就直接继承Activity。</p>
<p>public class MainActivity extends Activity</p>
<h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>想继承自AppCompatActivity，那么根据提示来使用AppCompat的theme，即将AndroidManifest.xml文件中关于Activity的主题配置改成：</p>
<p>android:theme=”@style/Theme.AppCompat.Light.NoActionBar”</p>
<p>设置透明Activity：<br>在你的AndroidManifest里的Activity标签里配置透明主题：</p>
<p>android:theme=”@android:style/Theme.Translucent”<br>android:theme=”@android:style/Theme.Translucent.NoTitleBar”<br>android:theme=”@android:style/Theme.Translucent.NoTitleBar.Fullscreen”</p>
<p>第一种保留标题和状态栏，其他为透明色<br>第二种保留状态栏，其他为透明色<br>第三种全屏透明</p>
<p>以上三种选一种即可。</p>
<p>一般情况下当一个Activity被其他Activity覆盖时,被覆盖的Activity都会调用onStop（）方法,但是有两种情况除外,一个是上层Activity是Dialog风格时,<br>另外一个是上层Activity是透明时;这两种情况只会调用onPause（）方法,但不会调用onStop方法.</p>
]]></content>
  </entry>
  <entry>
    <title>hexo+github搭建个人博客</title>
    <url>/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>本人程序员一枚，自从开始从事本行就心心念念的想搞一个自己的博客，怎奈有心无行动。<br>最近恍然一悟，最好的行动的时间永远都是当下，在不行动，永远只能羡慕别人的博客了。</p>
</blockquote>
<p>话不多说，干起来！！<br>经过1,2的天的准备，我选择了用hexo+github 框架来搭建自己的博客。</p>
<h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>这个直接参考其官网<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>操作即可，官网文档很详细。</p>
<h4 id="新建hexo项目"><a href="#新建hexo项目" class="headerlink" title="新建hexo项目"></a>新建hexo项目</h4><p>新建一个要存放代码的空文件夹，cmd命令进入此文件夹，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-init.png"  alt="hexo-init"></p>
<p>此时项目创建成功，项目结构如下：</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/init-suc.png"  alt="rr"></p>
<img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/init-suc.png"  class title="[图片描述]">

<h4 id="重点目录"><a href="#重点目录" class="headerlink" title="重点目录"></a>重点目录</h4><blockquote>
<p><strong>_config.yml</strong>   网站的配置信息，可以在此配置大部分的参数。<br><strong>source/_posts</strong>  存放我们编写的文档的路径<br><strong>themes</strong>   主题文件夹,你down的喜欢的主题文件都在此</p>
</blockquote>
<h4 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -g</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-g"  alt></p>
<p>命令执行后会生成public文件夹</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-g-suc.png"  alt></p>
<h4 id="查看静态页面"><a href="#查看静态页面" class="headerlink" title="查看静态页面"></a>查看静态页面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-s.png"  alt></p>
<p>浏览器打开效果如下<br><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-s-show.png"  alt></p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>若当前主题不是你喜欢的风格，可以更换为自己想要的风格</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>执行以下命令，下载你喜欢的主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure>

<h4 id="查看主题"><a href="#查看主题" class="headerlink" title="查看主题"></a>查看主题</h4><p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-change-theme.png"  alt></p>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><blockquote>
<p>修改站点配置文件_config.yml,把主题修改为Butterfly</p>
</blockquote>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-theme-set.png"  alt></p>
<h4 id="接下来执行以下命令"><a href="#接下来执行以下命令" class="headerlink" title="接下来执行以下命令"></a>接下来执行以下命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean // 清除旧的主题</span><br><span class="line">hexo g // 生成新的主题</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>此时浏览器查看效果，会发现如下问题</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-theme-fail.png"  alt></p>
<p>对应的解决方案可以在Butterfly的Github主页看到：</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-resolve-theme.png"  alt></p>
<h4 id="执行下面命令："><a href="#执行下面命令：" class="headerlink" title="执行下面命令："></a>执行下面命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure>

<p>再次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="创建categories与tags"><a href="#创建categories与tags" class="headerlink" title="创建categories与tags"></a>创建categories与tags</h3><h4 id="创建categories选项"><a href="#创建categories选项" class="headerlink" title="创建categories选项"></a>创建categories选项</h4><h5 id="执行下方命令"><a href="#执行下方命令" class="headerlink" title="执行下方命令"></a>执行下方命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<h5 id="查看categories"><a href="#查看categories" class="headerlink" title="查看categories"></a>查看categories</h5><p>categories文件夹下会有index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2019-04-22 14:47:40</span><br></pre></td></tr></table></figure>

<h5 id="添加type-“categories”"><a href="#添加type-“categories”" class="headerlink" title="添加type: “categories”"></a>添加type: “categories”</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br></pre></td></tr></table></figure>

<h5 id="给文章添加“categories”属性"><a href="#给文章添加“categories”属性" class="headerlink" title="给文章添加“categories”属性"></a>给文章添加“categories”属性</h5><p>打开需要添加分类的文章，为其添加categories属性。下方的categories:Hexo表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: android</span><br></pre></td></tr></table></figure>


<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。<br><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-categories-suc.png"  alt></p>
<h4 id="创建“标签”选项"><a href="#创建“标签”选项" class="headerlink" title="创建“标签”选项"></a>创建“标签”选项</h4><h5 id="执行下方命令-1"><a href="#执行下方命令-1" class="headerlink" title="执行下方命令"></a>执行下方命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<h5 id="查看tags"><a href="#查看tags" class="headerlink" title="查看tags"></a>查看tags</h5><p>在tags文件夹下，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2019-04-22 14:22:08</span><br></pre></td></tr></table></figure>

<h5 id="添加type-“tags”"><a href="#添加type-“tags”" class="headerlink" title="添加type: “tags”"></a>添加type: “tags”</h5><p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-tags-suc.png"  alt></p>
<h5 id="给文章添加“tags”属性"><a href="#给文章添加“tags”属性" class="headerlink" title="给文章添加“tags”属性"></a>给文章添加“tags”属性</h5><p>打开需要添加标签的文章，为其添加tags属性。</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-add-tags.png"  alt></p>
<blockquote>
<p><strong>这些属性和属性值之间必须有一个空格，否则解析错误。</strong></p>
</blockquote>
<h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><p>若想创建的文章分门别类的存放，便于以后查找维护，操作如下</p>
<h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post -p tool/blog <span class="string">"hexo+github搭建个人博客"</span></span><br></pre></td></tr></table></figure>
<p><strong>‘-p’ 一定要添加，这样才会把新建的文章放到tool目录下，否则会放在_posts目录下</strong></p>
<blockquote>
<p>tool 新建文章的存放目录<br>blog 文章名字<br>“hexo+github搭建个人博客” 文章标题</p>
</blockquote>
<h4 id="生成路径如下"><a href="#生成路径如下" class="headerlink" title="生成路径如下"></a>生成路径如下</h4><p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-new-suc.png"  alt></p>
<p>现在就可以编辑blog.md文件来优化文章内容</p>
<h3 id="解决不显示图片问题"><a href="#解决不显示图片问题" class="headerlink" title="解决不显示图片问题"></a>解决不显示图片问题</h3><p>测试发现markdown编辑好的文档，在hexo里面调试的时候图片加载不出来，别着急，解决办法如下</p>
<h4 id="安装图片插件"><a href="#安装图片插件" class="headerlink" title="安装图片插件"></a>安装图片插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h4 id="修改-config-yml配置文件"><a href="#修改-config-yml配置文件" class="headerlink" title="修改_config.yml配置文件"></a>修改_config.yml配置文件</h4><p>在_config.yml配置文件中，修改为 post_asset_folder: true， 然后新建一篇文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post -p android/bintray-release <span class="string">"通过bintray-release，发布库到Jcenter"</span></span><br></pre></td></tr></table></figure>

<p>此时会发现在android目录下多出一个与文章同名的文件夹，在此存在相关的资源文件</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-resolve-img.png"  alt></p>
<h4 id="使用图片资源语法如下"><a href="#使用图片资源语法如下" class="headerlink" title="使用图片资源语法如下"></a>使用图片资源语法如下</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![](hexo-resolve-img.png)</span><br></pre></td></tr></table></figure>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>没有github账号的话，先去注册一个。在此假设你已有github账号了，进入geihub创建仓库</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/github-new-repository.png"  alt><br><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/github-repository-setname.png"  alt></p>
<blockquote>
<p>注意名字使用你<strong>github用户名</strong>.github.io</p>
</blockquote>
<p>现在我们已经成功的在github创建了个人博客代码存在仓库</p>
<h4 id="上传文件到github"><a href="#上传文件到github" class="headerlink" title="上传文件到github"></a>上传文件到github</h4><p>在_config.yml中添加一下repo信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/xhongy/xhongy.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h4 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h4><p>直接通过hexo来发布到github，需要安装以下插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装成功后，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>刷新github对应的repository页面，即可看到提交的内容</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/github-upload-code.png"  alt></p>
<h4 id="浏览查看效果"><a href="#浏览查看效果" class="headerlink" title="浏览查看效果"></a>浏览查看效果</h4><p>在浏览器输入地址<a href="http://github用户名.github.io" target="_blank" rel="noopener">http://github用户名.github.io</a></p>
<h3 id="Butterfly主题适配"><a href="#Butterfly主题适配" class="headerlink" title="Butterfly主题适配"></a>Butterfly主题适配</h3><h4 id="修改首页展示图片"><a href="#修改首页展示图片" class="headerlink" title="修改首页展示图片"></a>修改首页展示图片</h4><p>按下图操作即可<br><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog-change-top-img.png"  alt></p>
<h4 id="修改首页图片高度"><a href="#修改首页图片高度" class="headerlink" title="修改首页图片高度"></a>修改首页图片高度</h4><p><img src="/" class="lazyload" data-src="/2020/04/19/hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/blog-change-top-height.png"  alt></p>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>到此，如何使用hexo+github搭建个人博客就讲完了，现在只是借助github来部署，后续我会申请一个域名进行部署，显得更高大上一些</p>
<h1 id="期待ing…"><a href="#期待ing…" class="headerlink" title="期待ing…."></a>期待ing….</h1>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>上传文件到github</title>
    <url>/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/</url>
    <content><![CDATA[<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>首先先去  <a href="https://github.com/" target="_blank" rel="noopener">github官网</a>  注册一个账号。</p>
<p>我们使用git需要先安装git工具，<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">下载地址</a></p>
<p>接下来进入正题</p>
<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>进入Github首页，点击New repository</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/new-rep.png"  alt></p>
<p>填写相应信息后点击create即可</p>
<blockquote>
<p>Repository name: 仓库名称<br>Description(可选): 仓库描述介绍<br>Public：仓库权限（公开共享，私有或指定合作者）<br>Initialize this repository with a README: 添加一个README.mdgitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignorelicense: </p>
</blockquote>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/rep-info.png"  alt></p>
<h4 id="仓库代码复制到本地"><a href="#仓库代码复制到本地" class="headerlink" title="仓库代码复制到本地"></a>仓库代码复制到本地</h4><p>执行相关命令将新建的仓库clone到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库地址</span><br></pre></td></tr></table></figure>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/git-add.png"  alt></p>
<h4 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h4><p>将本地要上传的代码放入刚clone下来的目录里面，cd 存放代码的路径,执行以下命令上传:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">"提交描述"</span></span><br><span class="line">git push -u origin master  （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入 帐号和密码）</span><br></pre></td></tr></table></figure>

<h4 id="查看上传是否成功"><a href="#查看上传是否成功" class="headerlink" title="查看上传是否成功"></a>查看上传是否成功</h4><p>此时就可以去github查看上传的代码，如下，上传成功</p>
<p><img src="/" class="lazyload" data-src="/2020/04/19/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0github/upload-suc.png"  alt></p>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>本文是针对有计算机基础的，不是每个步骤都说的太详尽，有不明白的可在自行百度。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Uni-微信小程序</title>
    <url>/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>今天来讲一讲uni-app开发微信小程序的流程。要开发微信小程序首先要安装微信开发者工具，然后开发小程序代码，接着上传微信平台进行发布。</p>
</blockquote>
<p><code>先从微信端入手，搭建微信小程序开发环境</code></p>
<h2 id="微信接入流程"><a href="#微信接入流程" class="headerlink" title="微信接入流程"></a>微信接入流程</h2><p><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-in.png"  alt></p>
<h3 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h3><ul>
<li>进入<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">小程序注册页</a> 根据指引填写信息和提交相应的资料，就可以拥有自己的<code>小程序帐号</code>。</li>
</ul>
<p><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-register.png"  alt></p>
<ul>
<li><p>注册成功后会向注册邮箱发送激活信息,登录邮箱进行激活<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-jihuo.png"  alt></p>
</li>
<li><p>激活之后就可以登录小程序管理平台，你可以管理你的小程序的权限，查看数据报表，发布小程序等操作。</p>
</li>
</ul>
<h3 id="获取小程序AppID"><a href="#获取小程序AppID" class="headerlink" title="获取小程序AppID"></a>获取小程序AppID</h3><p>登录 小程序后台 ，我们可以在菜单 “开发”-“开发设置” 看到小程序的 AppID 了 。<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-setting.png"  alt></p>
<blockquote>
<p>小程序的 AppID 相当于小程序平台的一个身份证，后续你会在很多地方要用到 AppID （注意这里要区别于服务号或订阅号的 AppID）。</p>
</blockquote>
<p>有了小程序帐号之后，我们需要一个工具来开发小程序。</p>
<h3 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h3><p>前往 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">开发者工具下载</a>页面 ，根据自己的操作系统下载对应的安装包进行安装，有关开发者工具更详细的介绍可以查看 《开发者工具介绍》 。</p>
<p>打开小程序开发者工具，用微信扫码登录开发者工具，准备开发你的第一个小程序吧！</p>
<!-- ### 你的第一个小程序
新建项目选择小程序项目，选择代码存放的硬盘路径，填入刚刚申请到的小程序的 AppID，给你的项目起一个好听的名字，勾选 "不使用云服务" 
（注意: 你要选择一个空的目录才可以创建项目），点击新建，你就得到了你的第一个小程序了，点击顶部菜单编译就可以在微信开发者工具中预览你的第
一个小程序。

![](wx-new.png)

![](wx-new-info.png)
 -->

<h2 id="开启uniapp小程序"><a href="#开启uniapp小程序" class="headerlink" title="开启uniapp小程序"></a>开启uniapp小程序</h2><h3 id="创建一个uni-app项目"><a href="#创建一个uni-app项目" class="headerlink" title="创建一个uni-app项目"></a>创建一个uni-app项目</h3><p><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-start.png"  alt><br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-new.png"  alt></p>
<h3 id="开发相关配置"><a href="#开发相关配置" class="headerlink" title="开发相关配置"></a>开发相关配置</h3><h4 id="uni端配置"><a href="#uni端配置" class="headerlink" title="uni端配置"></a>uni端配置</h4><ul>
<li><p>点击工具下面的设置<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-set1.png"  alt></p>
</li>
<li><p>然后在运行配置里面设置微信开发者工具的路径<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-set2.png"  alt></p>
</li>
</ul>
<h4 id="微信开发者工具配置"><a href="#微信开发者工具配置" class="headerlink" title="微信开发者工具配置"></a>微信开发者工具配置</h4><ul>
<li><p>登录微信开发者工具,点击设置下面的安全设置<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-set1.png"  alt></p>
</li>
<li><p>然后开启服务端口<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-set2.png"  alt></p>
</li>
<li><p>接着在运行配置中填写web服务调用URL<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-set3.png"  alt></p>
</li>
</ul>
<h3 id="开发项目配置"><a href="#开发项目配置" class="headerlink" title="开发项目配置"></a>开发项目配置</h3><ul>
<li><p>项目目录的manifest.json ，配置小程序AppID等。<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-set-appid.png"  alt></p>
</li>
<li><p>项目目录的pages.json，配置页面路由（pages数组），配置应用的状态栏、导航条、标题、窗口背景色（globalStyle对象）， 配置 tabBar 内容。<br>这个开发过小程序的朋友来说是差不多的。不过uni-app的每个页面是没有自己对应json文件的，都在公共的page.json中设置。</p>
</li>
</ul>
<h3 id="运行小程序"><a href="#运行小程序" class="headerlink" title="运行小程序"></a>运行小程序</h3><ul>
<li><p>点击”运行”下面的运行到小程序模拟器<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/uni-run.png"  alt></p>
</li>
<li><p>Hbuilder就自动将创建的小程序更新到微信开发者工具了<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-run.png"  alt></p>
</li>
<li><p>点击开发者工具”预览”按钮，或者微信扫一扫生成的二维码真机查看效果<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-run1.png"  alt></p>
</li>
</ul>
<h2 id="微信小程序代码上传"><a href="#微信小程序代码上传" class="headerlink" title="微信小程序代码上传"></a>微信小程序代码上传</h2><p><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-upload1.png"  alt></p>
<ul>
<li>完善相关信息，点击”上传”即可将代码上传到微信小程序服务器。<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-upload2.png"  alt></li>
</ul>
<h2 id="发布微信小程序"><a href="#发布微信小程序" class="headerlink" title="发布微信小程序"></a>发布微信小程序</h2><ul>
<li><p>登录微信公众平台并访问小程序首页，按要求完成第1步<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-public1.png"  alt></p>
</li>
<li><p>完善小程序信息<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info1.png"  alt></p>
</li>
<li><p>添加开发者与体验者<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info2.png"  alt></p>
</li>
<li><p>点击第2步“前往发布”按钮，按要求填写小程序相关信息及版本信息即可提交审核。<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info3.png"  alt></p>
</li>
<li><p>点击”提交审核按钮”，完善相关信息，<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info4.png"  alt><br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info5.png"  alt></p>
</li>
<li><p>点击”提交审核”，等待审核成功<br><img src="/" class="lazyload" data-src="/2020/05/08/Uni-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-info6.png"  alt></p>
</li>
</ul>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>切面编程</title>
    <url>/2020/04/21/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h3><p>AOP(Aspect-Oriented Pragramming),面向切面编程，是一种编程思想。Aop以切面（aspect）为基础，切面是一种新的模块化机制，用来描述分散在对象、类、或函数中的横切关点。</p>
<p>AOP 的思想是把对象的核心职责外的通用逻辑（如日志，性能，校验等）抽象出来，<br>把散布在多个对象多个模块的通用逻辑当作切面，然后动态地把代码插入到类的指定方法、<br>指定位置中，实现 AOP 的核心技术也是代码织入技术，如 AspectJ、Javassist、<br>DexMaker、ASMDex、动态代理等。</p>
<h3 id="AOP的主要功能"><a href="#AOP的主要功能" class="headerlink" title="AOP的主要功能"></a>AOP的主要功能</h3><p>AOP 是以非核心职责的通用逻辑为主的，所以主要功能是把日志记录、性能统计、<br>安全控制、事务处理、异常处理等代码从业务逻辑代码中划分出来，后面再动态织入到业<br>务逻辑中。所以 AOP 主要用于和业务逻辑相关的通用逻辑：</p>
<ul>
<li>日志记录、</li>
<li>性能统计、</li>
<li>安全控制、</li>
<li>事务处理、</li>
<li>异常处理</li>
<li>其他…</li>
</ul>
<h3 id="AspectJ术语"><a href="#AspectJ术语" class="headerlink" title="AspectJ术语"></a>AspectJ术语</h3><ul>
<li><p>Aspect ：切面，一个关注点的模块化，这个关注点可能会横切多个对象。</p>
</li>
<li><p>JPoint ：连接点，程序中可切入的点，例如方法调用时、读取某个变量时。</p>
</li>
<li><p>Pointcut ：切入点，代码注入的位置，其实就是有条件限定的JoinPoint，</p>
</li>
<li><p>例如只在特定方法中注入代码。</p>
</li>
<li><p>Advice ：在切入点注入的代码，一般有 before、after、around 三种类型，</p>
</li>
<li><p>表示代码执行前、执行后、替换目标代码，也就是在 Pointcut 何处注入代码。</p>
</li>
</ul>
<h3 id="AspectJ的使用"><a href="#AspectJ的使用" class="headerlink" title="AspectJ的使用"></a>AspectJ的使用</h3><h4 id="项目根路径-gradle-build-添加一下代码"><a href="#项目根路径-gradle-build-添加一下代码" class="headerlink" title="项目根路径/gradle.build 添加一下代码"></a>项目根路径/gradle.build 添加一下代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath &#39;org.aspectj:aspectjtools:1.9.1&#39;</span><br><span class="line">        classpath &#39;org.aspectj:aspectjweaver:1.9.1&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="项目app-buid-gradle文件中添加如下代码"><a href="#项目app-buid-gradle文件中添加如下代码" class="headerlink" title="项目app/buid.gradle文件中添加如下代码"></a>项目app/buid.gradle文件中添加如下代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.aspectj.bridge.IMessage</span><br><span class="line">import org.aspectj.bridge.MessageHandler</span><br><span class="line">import org.aspectj.tools.ajc.Main</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">final def log &#x3D; project.logger</span><br><span class="line">final def variants &#x3D; project.android.applicationVariants</span><br><span class="line">variants.all &#123; variant -&gt;</span><br><span class="line">    if (!variant.buildType.isDebuggable()) &#123;</span><br><span class="line">        log.debug(&quot;Skipping non-debuggable build type &#39;$&#123;variant.buildType.name&#125;&#39;.&quot;)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JavaCompile javaCompile &#x3D; variant.javaCompile</span><br><span class="line">    javaCompile.doLast &#123;</span><br><span class="line">        String[] args &#x3D; [&quot;-showWeaveInfo&quot;,</span><br><span class="line">                         &quot;-1.8&quot;,</span><br><span class="line">                         &quot;-inpath&quot;, javaCompile.destinationDir.toString(),</span><br><span class="line">                         &quot;-aspectpath&quot;, javaCompile.classpath.asPath,</span><br><span class="line">                         &quot;-d&quot;, javaCompile.destinationDir.toString(),</span><br><span class="line">                         &quot;-classpath&quot;, javaCompile.classpath.asPath,</span><br><span class="line">                         &quot;-bootclasspath&quot;, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class="line">        log.debug &quot;ajc args: &quot; + Arrays.toString(args)</span><br><span class="line"></span><br><span class="line">        MessageHandler handler &#x3D; new MessageHandler(true);</span><br><span class="line">        new Main().run(args, handler);</span><br><span class="line">        for (IMessage message : handler.getMessages(null, true)) &#123;</span><br><span class="line">            switch (message.getKind()) &#123;</span><br><span class="line">                case IMessage.ABORT:</span><br><span class="line">                case IMessage.ERROR:</span><br><span class="line">                case IMessage.FAIL:</span><br><span class="line">                    log.error message.message, message.thrown</span><br><span class="line">                    break;</span><br><span class="line">                case IMessage.WARNING:</span><br><span class="line">                    log.warn message.message, message.thrown</span><br><span class="line">                    break;</span><br><span class="line">                case IMessage.INFO:</span><br><span class="line">                    log.info message.message, message.thrown</span><br><span class="line">                    break;</span><br><span class="line">                case IMessage.DEBUG:</span><br><span class="line">                    log.debug message.message, message.thrown</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">	</span><br><span class="line">    implementation &#39;org.aspectj:aspectjrt:1.9.1&#39;</span><br><span class="line">    implementation project(path: &#39;:aspectjlib&#39;) &#x2F;&#x2F; 加入的依赖包</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="AspectJ语法示例"><a href="#AspectJ语法示例" class="headerlink" title="AspectJ语法示例"></a>AspectJ语法示例</h4><h5 id="以收集函数的执行时间，传入参数为例"><a href="#以收集函数的执行时间，传入参数为例" class="headerlink" title="以收集函数的执行时间，传入参数为例"></a>以收集函数的执行时间，传入参数为例</h5><p>先定义一个切面类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.aa.aspectlib;</span><br><span class="line"></span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class MethodAspect &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;function&quot;;</span><br><span class="line">	&#x2F;&#x2F; 匹配任意方法名为&#39;getReturnInfo&#39;函数</span><br><span class="line">    private static final String getReturnInfo_POINTCUTS &#x3D; &quot;execution(* *.getReturnInfo(..))&quot;;</span><br><span class="line">    &#x2F;&#x2F; 使用 @Pointcut 来注解方法,call(MethodSignature) 关键字表示方法被调用</span><br><span class="line">    @Pointcut(getReturnInfo_POINTCUTS)</span><br><span class="line">    public void onGetReturnInfoPointcuts() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;onGetReturnInfoPointcuts()&quot;)</span><br><span class="line">    public void beforeCreate(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        if (joinPoint.getTarget() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F; 获取传入的参数</span><br><span class="line">        Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">        String argsStr &#x3D; &quot;&quot;;</span><br><span class="line">        if (args !&#x3D; null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            argsStr &#x3D; &quot;\r\n参数：\r\n&quot;;</span><br><span class="line">            for (Object obj : args) &#123;</span><br><span class="line">                if (obj !&#x3D; null) &#123;</span><br><span class="line">                    argsStr +&#x3D; obj.toString() + &quot;\r\n&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(&quot;coco&quot;, &quot;当前类名：&quot; + joinPoint.getTarget().toString() + &quot;  方法名：&quot; + joinPoint.getSignature().getName());</span><br><span class="line">        AopUtil.saveInfo(AopUtil.getContext(joinPoint.getThis()), joinPoint.getSignature().getName(), &quot;当前类名：&quot; + joinPoint.getTarget().toString()</span><br><span class="line">                + argsStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 匹配任意方法名为&#39;asyncHttpRequest&#39;函数</span><br><span class="line">    @Before(&quot;execution(* *.asyncHttpRequest(..))&quot;)</span><br><span class="line">    public void beforeCreate1(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        if (joinPoint.getTarget() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">        String argsStr &#x3D; &quot;&quot;;</span><br><span class="line">        if (args !&#x3D; null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            argsStr &#x3D; &quot;\r\n参数：&quot;;</span><br><span class="line">            for (Object obj : args) &#123;</span><br><span class="line">                if (obj !&#x3D; null) &#123;</span><br><span class="line">                    argsStr +&#x3D; obj.toString() + &quot;\r\n&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(&quot;coco&quot;, &quot;当前类名：&quot; + joinPoint.getTarget().toString() + &quot;  方法名：&quot; + joinPoint.getSignature().getName());</span><br><span class="line">        AopUtil.saveInfo(AopUtil.getContext(joinPoint.getThis()), joinPoint.getSignature().getName(), &quot;当前类名：&quot; + joinPoint.getTarget().toString()</span><br><span class="line">                + argsStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="收集函数的返回值为例–-AfterReturning"><a href="#收集函数的返回值为例–-AfterReturning" class="headerlink" title="收集函数的返回值为例– AfterReturning"></a>收集函数的返回值为例– <strong>AfterReturning</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.aa.aspectlib;</span><br><span class="line"></span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class AfterReturningAspect &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;function&quot;;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 收集方法test1和test2的返回值</span><br><span class="line">    private static final String mergePdfFiles_POINTCUTS &#x3D; &quot;execution(* *.test1(..))&quot;;</span><br><span class="line">    private static final String splitPdfFiles_POINTCUTS &#x3D; &quot;execution(* *.test2(..))&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用 @Pointcut 来注解方法,call(MethodSignature) 关键字表示方法被调用</span><br><span class="line">    @Pointcut(mergePdfFiles_POINTCUTS)</span><br><span class="line">    public void onMergePdfFilesPointcuts() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Pointcut(splitPdfFiles_POINTCUTS)</span><br><span class="line">    public void onSplitPdfFilesPointcuts() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterReturning(pointcut &#x3D; &quot;onMergePdfFilesPointcuts() || onSplitPdfFilesPointcuts()&quot;, returning &#x3D; &quot;returnValue&quot;)</span><br><span class="line">    public void afterfun(JoinPoint joinPoint, Object returnValue) &#123;</span><br><span class="line">        &#x2F;&#x2F;獲取傳入的參數</span><br><span class="line">        Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">        String argsStr &#x3D; &quot;&quot;;</span><br><span class="line">        if (args !&#x3D; null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            argsStr &#x3D; &quot;\r\n参数：\r\n&quot;;</span><br><span class="line">            for (Object obj : args) &#123;</span><br><span class="line">                if (obj !&#x3D; null) &#123;</span><br><span class="line">                    argsStr +&#x3D; obj.toString() + &quot;\r\n&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(&quot;coco&quot;, &quot;当前类名：&quot; + joinPoint.getTarget().toString() + &quot;  方法名：&quot; + joinPoint.getSignature().getName());</span><br><span class="line">        AopUtil.saveInfo(AopUtil.getContext(joinPoint.getThis()), joinPoint.getSignature().getName(),</span><br><span class="line">                &quot;当前类名：&quot; + joinPoint.getTarget().toString() + argsStr + &quot;\r\n返回值：&quot;+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="以监测项目所有点击事件为例"><a href="#以监测项目所有点击事件为例" class="headerlink" title="以监测项目所有点击事件为例"></a>以监测项目所有点击事件为例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    * 所有的点击事件，包含正常使用、xml定义、butterknife</span><br><span class="line"> * 收集点击view所在的类，view的id，执行时间</span><br><span class="line">    * @param joinPoint</span><br><span class="line">    * @throws Throwable</span><br><span class="line">    *&#x2F;</span><br><span class="line">   @Around(&quot;execution(* *(android.view.View))&quot;)</span><br><span class="line">   public void aroundAllMethodCall(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">       Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">       View view &#x3D; AopUtil.getViewFromArgs(args);</span><br><span class="line">       if (view &#x3D;&#x3D; null) &#123;</span><br><span class="line">           Log.d(TAG, &quot;unknown type method, so proceed it&quot;);</span><br><span class="line">           joinPoint.proceed();</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;获取View 的 string id</span><br><span class="line">       String resEntryName &#x3D; null;</span><br><span class="line">       String resName &#x3D; null;</span><br><span class="line">       resEntryName &#x3D; view.getContext().getResources().getResourceEntryName(view.getId());</span><br><span class="line">       resName &#x3D; view.getContext().getResources().getResourceName(view.getId());</span><br><span class="line"></span><br><span class="line">       AopUtil.saveInfo(AopUtil.getContext(joinPoint.getThis()),&quot;click&quot;, &quot;点前所在类：&quot; + view.getContext() + &quot;  点击view id：&quot; + resEntryName);</span><br><span class="line">       Log.e(&quot;coco1&quot;, &quot;点前所在类：&quot; + view.getContext() + &quot;  &quot; + resEntryName + &quot;  view id：&quot; + resName);</span><br><span class="line">       &#x2F;&#x2F; 执行原代码</span><br><span class="line">       joinPoint.proceed();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h5 id="以监测函数运行时间为例"><a href="#以监测函数运行时间为例" class="headerlink" title="以监测函数运行时间为例"></a>以监测函数运行时间为例</h5><p>首先定义一个接口类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package ...;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="line">public @interface TimeSpend &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义获取运行时间切面类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package ...;</span><br><span class="line"></span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class MethodSpendTimeAspect &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;TIME&quot;;</span><br><span class="line">    @Pointcut(&quot;call(@com.coco.aoplib.TimeSpend * *(..))&quot;)</span><br><span class="line">    public void methodTime() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;methodTime()&quot;)</span><br><span class="line">    public Object weaveJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        MethodSignature methodSignature &#x3D; (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        String className &#x3D; methodSignature.getDeclaringType().getSimpleName();</span><br><span class="line">        String methodName &#x3D; methodSignature.getName();</span><br><span class="line">        String funName &#x3D; methodSignature.getMethod().getAnnotation(TimeSpend.class).value();</span><br><span class="line">        &#x2F;&#x2F;统计时间</span><br><span class="line">        long begin &#x3D; System.currentTimeMillis();</span><br><span class="line">        Object result &#x3D; joinPoint.proceed();</span><br><span class="line">        long duration &#x3D; System.currentTimeMillis() - begin;</span><br><span class="line">        Log.e(&quot;coco&quot;, String.format(&quot;功能：%s,%s类的%s方法执行了，用时%d ms&quot;, funName, className, methodName, duration));</span><br><span class="line">        AopUtil.saveInfo(AopUtil.getContext(joinPoint.getThis()),TAG, String.format(&quot;功能：%s,%s类的%s方法执行了，用时%d ms&quot;, funName, className, methodName, duration));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在要统计运行时间的函数上加上注解<strong>@TimeSpend</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@TimeSpend</span><br><span class="line">public void test()&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="抓获ANR等信息"><a href="#抓获ANR等信息" class="headerlink" title="抓获ANR等信息"></a>抓获ANR等信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.aa.aspectlib;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class AfterThrowAspect &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;Throwable&quot;;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 捕获应该ANR等info</span><br><span class="line">     * 需要注意：如果目标方法中出现异常，并由catch捕捉处理且catch又没有抛出新的异常，那么针对该目标方法的AfterThrowing增强处理将不会被执行。</span><br><span class="line">     * 异常捕获</span><br><span class="line">     * @param ex</span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    @AfterThrowing(pointcut &#x3D; &quot;execution(* *..*(..))&quot;, throwing &#x3D; &quot;ex&quot;)</span><br><span class="line">    public void anyFuncThrows(Throwable ex) &#123;</span><br><span class="line">        StackTraceElement[] stackElements &#x3D; ex.getStackTrace();&#x2F;&#x2F;通过Throwable获得堆栈信息</span><br><span class="line">        String temp &#x3D; ex.getMessage() + &quot;\r\n&quot;;</span><br><span class="line">        if (stackElements !&#x3D; null) &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; stackElements.length; i++) &#123;</span><br><span class="line">                temp +&#x3D; &quot;        &quot; + stackElements[i].toString() + &quot;\r\n&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">			&#x2F;&#x2F; 异常信息写入文件</span><br><span class="line">            AopUtil.saveInfo(AopUtil.getContext(&quot;&quot;),TAG, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>默认设置日志存放路径为 <strong>/data/user/0/包名/files</strong></p>
<p>具体查看在androidstudio里面打开Device File Explorer，开发方法如下：</p>
<p><img src="/" class="lazyload" data-src="/2020/04/21/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/file-open.png"  alt><br>在data/data 下面找到项目对应包名目录，查看文件<br><img src="/" class="lazyload" data-src="/2020/04/21/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/file-search.png"  alt></p>
<p>内容如下示例<br><img src="/" class="lazyload" data-src="/2020/04/21/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/save-info.png"  alt></p>
<h3 id="github-示例"><a href="#github-示例" class="headerlink" title="github 示例"></a>github 示例</h3><p>demo已上传github，地址如下</p>
<p><a href="https://github.com/xhongy/AspectDemo" target="_blank" rel="noopener">https://github.com/xhongy/AspectDemo</a></p>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>到此，aop简单介绍已完成，因刚开始使用，写的有些片面，更多知识请自行去官网或者百度。</p>
<p>写的不对的地方，欢迎留言讨论！！</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>aspect</tag>
        <tag>切面编程</tag>
        <tag>日志埋点</tag>
      </tags>
  </entry>
  <entry>
    <title>热修复、类加载与修复原理</title>
    <url>/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="类加载解析"><a href="#类加载解析" class="headerlink" title="类加载解析"></a>类加载解析</h2><p>热修复一种不用发布新版本就可以修复线上bug的技术。其修复的核心原理是类加载机制。</p>
<h3 id="ART与Dalvik"><a href="#ART与Dalvik" class="headerlink" title="ART与Dalvik"></a>ART与Dalvik</h3><h4 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h4><p>Dalvik是Google公司自己设计用于android平台的java虚拟机。支持已转化为<strong>.dex</strong>格式的java应用程序运行，<br>.dex格式是专为Dalvik应用设计的一种压缩格式，适合内存和处理器速度有限的系统</p>
<h4 id="ATR"><a href="#ATR" class="headerlink" title="ATR"></a>ATR</h4><p>Android Runtime,Android 4.4中引入的一个开发者选项，也是Android5.0及更高版本的默认模式。在应用安装的时候Ahead-Of-Time(AOT)<br>预编译字节码到机器语言（ART运行的是机器语言），这一机制叫Ahead-Of-Time(AOT)预编译。应用程序安装会变慢(安装时执行了字节码到机器码的编辑过程)，但是执行将更有效率，启动更快。</p>
<h4 id="两种区别"><a href="#两种区别" class="headerlink" title="两种区别"></a>两种区别</h4><ul>
<li>在Dalvik下，应用程序运行需要解释执行，常用热点代码通过及时编译器（JIT-just in time)将字节码转换为机器码，运行效率低。<br>而在ART环境中，应用在安装时，字节码预编译成机器码，安装慢了，但是运行效率会高。</li>
<li>ART占用空间比Dalvik大（字节码转机器码），空间换时间</li>
<li>预编译也可以明显改善电池续航，因为应用程序每次运行不需要重复编译了，从而减少了CPU的使用频率，降低了能耗。</li>
</ul>
<p><strong>ART运行的是机器语言，但是同时ART也兼容Dalvik，也可以运行.dex文件</strong><br><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/img1.png"  alt></p>
<p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/img2.png"  alt></p>
<h3 id="ClassLoader-java类加载器"><a href="#ClassLoader-java类加载器" class="headerlink" title="ClassLoader java类加载器"></a>ClassLoader java类加载器</h3><p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/img3.png"  alt></p>
<h4 id="DexClassLoader与PathClassLoader"><a href="#DexClassLoader与PathClassLoader" class="headerlink" title="DexClassLoader与PathClassLoader"></a>DexClassLoader与PathClassLoader</h4><p>来看一下DexClassLoader与PathClassLoader的构造函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param optimizedDirectory directory where optimized dex files</span><br><span class="line"> *     should be written; must not be &#123;@code null&#125;</span><br><span class="line"> * optimizedDirectory:dexPath优化后的存放目录,此路径不能为sdcard，</span><br><span class="line"> * 必须为一个私有路径,如： File dexOutputDir &#x3D; context.getCodeCacheDir();</span><br><span class="line"> * @param &#123;Object&#125; String libraryPath:so文件路径</span><br><span class="line"> *&#x2F;</span><br><span class="line">public DexClassLoader(String dexPath, String optimizedDirectory,</span><br><span class="line">            String libraryPath, ClassLoader parent) &#123;</span><br><span class="line">        super(dexPath, new File(optimizedDirectory), libraryPath, parent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * </span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 第二个参数为空，实际上dexPath文件也优化了，只不过是放在了 **&#x2F;data&#x2F;dalvik-cache** 目录</span><br><span class="line"> * @param &#123;Object&#125; String dexPath</span><br><span class="line"> * @param &#123;Object&#125; String libraryPath:so文件路径</span><br><span class="line"> * @param &#123;Object&#125; ClassLoader parent</span><br><span class="line"> *&#x2F;</span><br><span class="line">public PathClassLoader(String dexPath, String libraryPath,</span><br><span class="line">            ClassLoader parent) &#123;</span><br><span class="line">        super(dexPath, null, libraryPath, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到两者唯一的区别在于：创建<code>DexClassLoader</code>需要传递一个<code>optimizedDirectory</code>参数<br>，并且会将其创建为<code>File</code>对象传给<code>super</code>，而<code>PathClassLoader</code>则直接给到null。<br>因此两者都可以加载<strong>指定的dex，以及jar、zip、apk中的classes.dex</strong></p>
<h4 id="双亲委托机制"><a href="#双亲委托机制" class="headerlink" title="双亲委托机制"></a>双亲委托机制</h4><p>某个类加载器在加载类时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以<br>完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务或者没有父类加载器时，<br>才自己去加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// if父亲不为空，则调用父亲的loadClass</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果都找不到就自己加载</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h5><p>​可以看到在所有父ClassLoader无法加载Class时，则会调用自己的<code>findClass</code>方法。<br><code>findClass</code>在ClassLoader中的定义为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>其实任何ClassLoader子类，都可以重写<code>loadClass</code>与<code>findClass</code>。一般如果你不想使用双亲委托，则重写<code>loadClass</code>修改其实现。</li>
<li>而重写<code>findClass</code>则表示在双亲委托下，父ClassLoader都找不到Class的情况下，定义自己如何去查找一个Class。我们的<code>PathClassLoader</code>会自己负责加载<code>MainActivity</code>这样的程序中自己编写的类，利用</li>
<li>双亲委托父ClassLoader加载Framework中的<code>Activity</code>。说明<code>PathClassLoader</code>并没有重写<code>loadClass</code>，因此我们可以来看看PathClassLoader中的 <code>findClass</code> 是如何实现的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * private final DexPathList pathList;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,String 	</span></span></span><br><span class="line"><span class="function"><span class="params">						librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>(parent);</span><br><span class="line">	<span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, librarySearchPath, 		</span><br><span class="line">                                    optimizedDirectory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">	List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">    <span class="comment">//查找指定的class</span></span><br><span class="line">    Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">		ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + 														name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">        <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">			cnfe.addSuppressed(t);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现非常简单，从<code>pathList</code>中查找class。继续查看<code>DexPathList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dexElements是一个Element数组，Element中包含一个DexFile,即一个dex文件，里面的native(c/c++)来进行dex的加载工作</span></span><br><span class="line"><span class="comment">//private Element[] dexElements;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, File optimizedDirectory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(definingContext, dexPath, librarySearchPath, optimizedDirectory, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = element.findClass(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<h4 id="类加载流程图"><a href="#类加载流程图" class="headerlink" title="类加载流程图"></a>类加载流程图</h4><p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/img4.png"  alt></p>
<p>系统启动的时候由BootClassLoader去加载系统相关类，由PathClassLoader加载自己写的类</p>
<h3 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h3><p>安卓的类加载器在加载一个类时会先从自身DexPathList对象中的Element数组中获取（Element[] dexElements）到对应的类，之后再加载。<br>采用的是数组遍历的方式，不过注意，遍历出来的是一个个的dex文件。在for循环中，首先遍历出来的是dex文件，然后再是从dex文件中获取class，所以，<br>我们只要让修复好的class打包成一个dex文件，放于Element数组的第一个元素，这样就能保证获取到的class是最新修复好的class了，如果找到类则返回，<br>如果找不到从下一个dex文件继续查找。热修复只需要向dexElements数组最前面插入一个包含了修复之后的类的dex文件，即可替换存在问题的类。<br>（当然，有bug的class也是存在的，不过是放在了Element数组的最后一个元素中，所以没有机会被拿到而已。</p>
<h4 id="修复实现"><a href="#修复实现" class="headerlink" title="修复实现"></a>修复实现</h4><p>了解了类的加载原理，我们知道，类加载的时候其实就是加载的一个一个的dex文件，据此我们是不是可以根据类加载的原理将要修复的bug生成dex文件，在类加载的时候去加载修复后的dex文件呢。是的，没错，我们当然可以这么做了。接下来我们就讲一讲具体该怎么实现呢。<br>思想就是要在应用启动的时候就去加载要修复的dex文件。这里我们放到Application文件里面去操作</p>
<p>直接上代码吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PatchUtil.loadPatch(getApplicationContext(), <span class="string">"/sdcard/patch.dex"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PatchUtil.java</strong><br>这里只做了api&gt;23的适配，别的版本适配，后续添加<code>todo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">(Context context, String patch)</span> <span class="keyword">throws</span> NoSuchFieldException,</span></span><br><span class="line"><span class="function">            IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果patch不存在，直接返回</span></span><br><span class="line">        File patchFile = <span class="keyword">new</span> File(patch);</span><br><span class="line">        <span class="keyword">if</span> (!patchFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为要修复的是自己写的文件，直接用PathClassLoader就行，获取系统的PathClassLoader</span></span><br><span class="line">        PathClassLoader pathClassLoader = (PathClassLoader) context.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获取BaseDexClassLoader中DexPathList类型的属性:pathList</span></span><br><span class="line">        Field pathListField = pathClassLoader.getClass().getSuperclass().getDeclaredField(</span><br><span class="line">                <span class="string">"pathList"</span>);</span><br><span class="line">        pathListField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object pathListObject = pathListField.get(pathClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取DexPathList中Element[]类型的dexElements</span></span><br><span class="line">        Field dexElementsField = pathListObject.getClass().getDeclaredField(<span class="string">"dexElements"</span>);</span><br><span class="line">        dexElementsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object dexElementsObject = dexElementsField.get(pathListObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置optimizedDirectory</span></span><br><span class="line">        File odex = context.getDir(<span class="string">"odex"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//创建自定义的DexClassLoader</span></span><br><span class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(patch, odex.getAbsolutePath(), <span class="keyword">null</span>,</span><br><span class="line">                context.getClassLoader());</span><br><span class="line">        <span class="comment">//获取BaseDexClassLoader中DexPathList类型的属性:pathList</span></span><br><span class="line">        Field patchPathListField = dexClassLoader.getClass().getSuperclass().getDeclaredField(</span><br><span class="line">                <span class="string">"pathList"</span>);</span><br><span class="line">        patchPathListField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object patchPathListObject = patchPathListField.get(dexClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取DexPathList中Element[]类型的dexElements</span></span><br><span class="line">        Field patchDexElementsField = patchPathListObject.getClass().getDeclaredField(</span><br><span class="line">                <span class="string">"dexElements"</span>);</span><br><span class="line">        patchDexElementsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object patchDexElementsObject = patchDexElementsField.get(patchPathListObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并数组，一定要讲修复的dex文件放到前面，因为加载的时候同名文件只会加载一次</span></span><br><span class="line">        Class&lt;?&gt; elementClazz = dexElementsObject.getClass().getComponentType();</span><br><span class="line">        <span class="keyword">int</span> dexElementsSize = Array.getLength(dexElementsObject);</span><br><span class="line">        <span class="keyword">int</span> patchDexElementsSize = Array.getLength(patchDexElementsObject);</span><br><span class="line">        <span class="keyword">int</span> newDexElementsSize = dexElementsSize + patchDexElementsSize;</span><br><span class="line">        Object newDexElements = Array.newInstance(elementClazz, newDexElementsSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newDexElementsSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; patchDexElementsSize) &#123;</span><br><span class="line">                Array.set(newDexElements, i, Array.get(patchDexElementsObject, i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Array.set(newDexElements, i, Array.get(dexElementsObject,</span><br><span class="line">                        i - patchDexElementsSize));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换原来的dexElements</span></span><br><span class="line">        dexElementsField.set(pathListObject, newDexElements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="发布有bug版本"><a href="#发布有bug版本" class="headerlink" title="发布有bug版本"></a>发布有bug版本</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aa.classloadertest;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">		MyClass.ShowLog(MainActivity.<span class="keyword">this</span>,<span class="string">"oh,my god 出错了"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aa.patchlib;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String test = <span class="string">"bug 前"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowLog</span><span class="params">(Context c, String info)</span></span>&#123;</span><br><span class="line">        Toast.makeText(c,info +<span class="string">" now myclass is "</span>+test,Toast.LENGTH_SHORT).show() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/wrong.jpg"  alt></p>
<h4 id="修复bug，生成dex文件"><a href="#修复bug，生成dex文件" class="headerlink" title="修复bug，生成dex文件"></a>修复bug，生成dex文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aa.classloadertest;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">		MyClass.ShowLog(MainActivity.<span class="keyword">this</span>,<span class="string">"wa! 好了"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aa.patchlib;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String test = <span class="string">"bug 修复了"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowLog</span><span class="params">(Context c, String info)</span></span>&#123;</span><br><span class="line">        Toast.makeText(c,info +<span class="string">" now myclass is "</span>+test,Toast.LENGTH_SHORT).show() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将bug修复后，执行build clean 命令，完成后执行命令Rebuild Project,成功后在在相关目录下找到要修复的类<br>.\app\build\intermediates\javac\debug\classes\下生成对应的.class文件,我这里修复的是MainActivity.class文件<br><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/changeCode.png"  alt></p>
<p>MyClass文件在依赖包下面，就到依赖包下相关路径查找，这里我的路径是：<br>.\patchlib\build\intermediates\javac\debug\classes\com\aa\patchlib<br><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/libChangeCode.png"  alt></p>
<p>将刚生成的MainActivity.class与MyClass.class文件复制到一个空目录下，记得一定要在此空目录下创建于这个类同名的目录，我的结构如下<br><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/patchPath.png"  alt></p>
<blockquote>
<p>接下来打开cmd 运行命令生成dex文件：<br>dx –dex –output  需要生成dex的目录和名称   class文件所在的目录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dx --dex --output E:\patchDex\patch.dex E:\patchClass</span><br></pre></td></tr></table></figure>

<ul>
<li>dx命令在android安装目录build-tools下面，如果没有将此命令放入环境变量，需要到build-tools目录下面执行此命令</li>
</ul>
<p>这时查看E:\patchDex 目录<br><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/seeDex.png"  alt></p>
<h4 id="补丁文件上传"><a href="#补丁文件上传" class="headerlink" title="补丁文件上传"></a>补丁文件上传</h4><p>目前测试我先把此dex文件放到手机sdcard目录下面测试，正式环境下应该放到服务器，接口获取然后加载<br><strong>执行以下命令将此dex文件放到sdcard下面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb push E:\patchDex\patch.dex &#x2F;sdcard</span><br></pre></td></tr></table></figure>


<h4 id="查看修复效果"><a href="#查看修复效果" class="headerlink" title="查看修复效果"></a>查看修复效果</h4><p>重启应用</p>
<p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/changeok.jpg"  alt></p>
<h3 id="热修复demo-code"><a href="#热修复demo-code" class="headerlink" title="热修复demo code"></a>热修复demo code</h3><p>关于此热修复方法，code已上传github<br><a href="https://github.com/xhongy/Samples" target="_blank" rel="noopener">https://github.com/xhongy/Samples</a></p>
<h3 id="热修复框架："><a href="#热修复框架：" class="headerlink" title="热修复框架："></a>热修复框架：</h3><p><img src="/" class="lazyload" data-src="/2020/04/22/%E7%83%AD%E4%BF%AE%E5%A4%8D%E3%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%BF%AE%E5%A4%8D%E5%8E%9F%E7%90%86/hotFrame.png"  alt></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>热修复</tag>
        <tag>类加载</tag>
        <tag>dex</tag>
      </tags>
  </entry>
  <entry>
    <title>java-注解与反射</title>
    <url>/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java注解(Annotation)又称Java 标注，是JDK5.0引入的一种注释机制。注解是元数据的一种形式，提供有关于程序但不属于程序本身的数据。注解对他们注解的代码的操作没有直接影响。</p>
<blockquote>
<p>注解本身没有任何意义，单独的注解就是一种注释，他需要结合其他如反射、插桩等技术才有意义。</p>
</blockquote>
<h3 id="注解声明"><a href="#注解声明" class="headerlink" title="注解声明"></a>注解声明</h3><h4 id="声明一个注解类型"><a href="#声明一个注解类型" class="headerlink" title="声明一个注解类型"></a>声明一个注解类型</h4><p>java中的所有的注解，默认实现Annotation接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> interfce Annotation &#123;</span><br><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">hasCode</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"> Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与声明一个”class”不同的是，注解的声明使用”@interface”关键字。一个注解的声明如下：</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnnotationTest&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p> 在定义注解时，注解类也能够使用其他的注解声明。对注解类型进行注解的注解类，称之为meta-annotation(元注解)。一般的，我们在定义自定义注解时，需要指定的元注解有两个：</p>
<h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>注解标记另一个注解，以限制可以应用注解的Java元素类型。可选择有：</p>
<ul>
<li><p>ElementType.ANNOTATION_TYPE   用于注解类型</p>
</li>
<li><p>ElementType.CONSTRUCTOR 应用于构造函数</p>
</li>
<li><p>ElementType.FIELD 应用于字段或属性</p>
</li>
<li><p>ElementType.LOCAL_VARIABLE 用于与局部变量</p>
</li>
<li><p>ElementType.METHOD 应用于方法级注解</p>
</li>
<li><p>ElementType.PACKAGE 应用于包声明</p>
</li>
<li><p>ElementType.PARAMETER 应用于方法的参数</p>
</li>
<li><p>ElementType.TYPE 只能应用于类</p>
<blockquote>
<p>ElementType.PARAMETER使用时需要添加ElementType.FIELD</p>
</blockquote>
</li>
</ul>
<h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>指定标记注解的存储方式</p>
<ul>
<li><p>RetentionPolicy.SOURCE  标记的注解仅保留在源级别中，并被编译器忽略</p>
</li>
<li><p>RetentionPolicy.CLASS   标记的注解在编译时由编译器保留，但Java虚拟机(JVM)会忽略</p>
</li>
<li><p>RetentionPolicy.RUNTIME 标记的注解有JVM保留，因此运行时环境可以使用它</p>
<blockquote>
<p>@Retention 三个值中 SOURCE &lt; CLASS &lt; RUNTIME，即CLASS包含了SOURCE，RUNTIME包含SOURCE、CLASS.</p>
</blockquote>
</li>
</ul>
<h3 id="注解类型元素"><a href="#注解类型元素" class="headerlink" title="注解类型元素"></a>注解类型元素</h3><p> 在上文元注解中，允许在使用注解时传递参数，我们也能让自定义注解的主体包含注解类型元素声明，他们看起来很像方法<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.FIELD&#125;) <span class="comment">//允许在类与类属性上标记该注解</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">// 注解保留在源码中</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnnotationTest &#123; </span><br><span class="line"> <span class="function">String <span class="title">value</span><span class="params">()</span></span>; <span class="comment">// 无默认值</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 1</span>; <span class="comment">//有默认值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在使用注解时，如果定义的注解中的类型元素无默认值，则必须进行传值<br>还要注意：”value是一个很特殊的元素名”，当注解中只有一个”value”参数时，传参可以不写元素名，但是如果使用的不是”value”,则必须添加相关元素名<br>当类型元素多于1个时，元素名都必须要填写</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果只存在value元素需要传值的情况，则可以省略:元素名</span></span><br><span class="line"><span class="meta">@AnnotationTest</span>(<span class="string">"帅"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">// 多个参数时，元素名必须填写</span></span><br><span class="line"><span class="meta">@AnnotationTest</span>(value=<span class="string">"帅"</span>,age = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2;</span><br></pre></td></tr></table></figure>


<h3 id="注解使用场景"><a href="#注解使用场景" class="headerlink" title="注解使用场景"></a>注解使用场景</h3><table>
<thead>
<tr>
<th>级别</th>
<th>技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>RetentionPolicy.SOURCE</td>
<td>APT</td>
<td>在编译期能够获取注解与注解声明的类，包括类中的所有成员信息，一般用于生产额外的辅助类。</td>
</tr>
<tr>
<td>RetentionPolicy.CLASS</td>
<td>字节码增强</td>
<td>在编译出Class后，通过修改Class数据以实现修改代码逻辑目的。</td>
</tr>
<tr>
<td>RetentionPolicy.RUNTIME</td>
<td>反射</td>
<td>在程序运行期间，通过反射技术动态获取注解与其元素，从而完成不同的逻辑判断。</td>
</tr>
</tbody></table>
<h3 id="编写注解处理器"><a href="#编写注解处理器" class="headerlink" title="编写注解处理器"></a>编写注解处理器</h3><h4 id="创建一个java-library"><a href="#创建一个java-library" class="headerlink" title="创建一个java library"></a>创建一个java library</h4><p>在app-&gt;build.gradle里面添加对其的依赖<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/java-lib.png"  alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">annotationProcessor <span class="title">project</span><span class="params">(path: <span class="string">':annotation'</span>)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="注解处理器类"><a href="#注解处理器类" class="headerlink" title="注解处理器类"></a>注解处理器类</h4><blockquote>
<p>注解处理器需要集成”AbstractProcessor”类<br>@SupportedAnnotationTypes标明要处理的注解类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加要处理的注解</span></span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"cn.coco.annotationlib.AnnotationTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        Messager messager = processingEnv.getMessager();</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"ss"</span>);</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"ss"</span>+set.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加相关资源"><a href="#添加相关资源" class="headerlink" title="添加相关资源"></a>添加相关资源</h5><p>手动创建指定名称的路径：resources-&gt;META-INF-&gt;services-&gt;javax.annotation.processing.Processor<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/annotation-resource.png"  alt></p>
<h5 id="引用注解处理器"><a href="#引用注解处理器" class="headerlink" title="引用注解处理器"></a>引用注解处理器</h5><p>javax.annotation.processing.Processor文件添加注解处理器的引用<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/annotation-info.png"  alt></p>
<h4 id="查看注解处理器效果"><a href="#查看注解处理器效果" class="headerlink" title="查看注解处理器效果"></a>查看注解处理器效果</h4><p>build项目，查看打印信息,看到如下信息说明注解已经起作用了<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/logcat-annotation.png"  alt></p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote>
<p>反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用他的任意方法和属性；并且能改变他的属性。</p>
</blockquote>
<p>java反射机制主要提供了以下功能：</p>
<ul>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时获取或者修改任意一个类的所具有的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法或属性</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>反射始于class，Class是一个类，封装了当前对象所对应的类的信息。</p>
<h4 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h4><p>有三种方式</p>
<ul>
<li><p>通过类名获取   类名.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; klass = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class&lt;?&gt; classInt = Integer.TYPE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对象获取    对象名.getClass()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">Class&lt;?&gt; klass = str.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过全类名获取  Class.forName(全类名) classLoader.loadClass(全类名)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="反射-注解Demo"><a href="#反射-注解Demo" class="headerlink" title="反射+注解Demo"></a>反射+注解Demo</h2><p>接下来以获取一个TextView+参数传递的为例，讲解反射+注解的使用</p>
<h3 id="编写注解类"><a href="#编写注解类" class="headerlink" title="编写注解类"></a>编写注解类</h3><figure class="highlight java"><figcaption><span>InjectView.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.annotationtest.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.IdRes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InjectView &#123;</span><br><span class="line">    <span class="comment">// 指定传递参数类型为R.id.*</span></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>InjectData.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.annotationtest.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InjectData &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写反射方法"><a href="#编写反射方法" class="headerlink" title="编写反射方法"></a>编写反射方法</h3><figure class="highlight java"><figcaption><span>InjectUtil.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.annotationtest.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射获取view</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectView</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        Class&lt;? extends Activity&gt; cls = activity.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取此类的所有成员</span></span><br><span class="line">        Field[] declaredFields = cls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field filed:declaredFields)&#123;</span><br><span class="line">            <span class="comment">// 判断属性是否被InjectView注解</span></span><br><span class="line">            <span class="keyword">if</span>(filed.isAnnotationPresent(InjectView<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                InjectView injectView = filed.getAnnotation(InjectView<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//获取注解中设置的id</span></span><br><span class="line">                <span class="keyword">int</span> id = injectView.value();</span><br><span class="line">                View view = activity.findViewById(id);</span><br><span class="line">                <span class="comment">//反射设置属性的值</span></span><br><span class="line">                filed.setAccessible(<span class="keyword">true</span>); <span class="comment">//设置访问权限，允许操作private的属性</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//反射赋值</span></span><br><span class="line">                    filed.set(activity,view);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射获取传递的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectData</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        Class&lt;? extends Activity&gt; cls = activity.getClass();</span><br><span class="line">        Field[] fields = cls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field filed:fields)&#123;</span><br><span class="line">            <span class="keyword">if</span>(filed.isAnnotationPresent(InjectData<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                InjectData temp = filed.getAnnotation(InjectData<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String str = temp.value();</span><br><span class="line">                String value = activity.getIntent().getStringExtra(str);</span><br><span class="line">                <span class="comment">//反射设置属性的值</span></span><br><span class="line">                filed.setAccessible(<span class="keyword">true</span>); <span class="comment">//设置访问权限，允许操作private的属性</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//反射赋值</span></span><br><span class="line">                    filed.set(activity,value);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.annotationtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> cn.coco.annotationtest.Inject.InjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.coco.annotationtest.Inject.InjectView;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.tv)</span><br><span class="line">    TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        InjectUtil.injectVie(<span class="keyword">this</span>);</span><br><span class="line">        tv.setText(<span class="string">"Coco 你好！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clicked</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, InjectTestActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.putExtra(<span class="string">"name1"</span>,<span class="string">"coco1"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"name2"</span>,<span class="string">"coco2"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"name3"</span>,<span class="string">"coco3"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"name4"</span>,<span class="string">"coco4"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"name5"</span>,<span class="string">"coco5"</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.annotationtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> cn.coco.annotationtest.Inject.InjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.coco.annotationtest.Inject.InjectView;</span><br><span class="line"><span class="keyword">import</span> cn.coco.annotationtest.Inject.InjectData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectTestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectView</span>(R.id.tv)</span><br><span class="line">    TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectData</span>(<span class="string">"name1"</span>)</span><br><span class="line">    String name1;</span><br><span class="line">    <span class="meta">@InjectData</span>(<span class="string">"name2"</span>)</span><br><span class="line">    String name2;</span><br><span class="line">    <span class="meta">@InjectData</span>(<span class="string">"name3"</span>)</span><br><span class="line">    String name3;</span><br><span class="line">    <span class="meta">@InjectData</span>(<span class="string">"name4"</span>)</span><br><span class="line">    String name4;</span><br><span class="line">    <span class="meta">@InjectData</span>(<span class="string">"name5"</span>)</span><br><span class="line">    String name5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_test);</span><br><span class="line">        InjectUtil.injectView(<span class="keyword">this</span>);</span><br><span class="line">        InjectUtil.injectData(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        tv.setText(<span class="string">"name1="</span>+name1+<span class="string">"\n"</span>+<span class="string">"name2="</span>+name2+<span class="string">"\n"</span>+<span class="string">"name2="</span>+name2+<span class="string">"\n"</span>+<span class="string">"name2="</span>+name2+<span class="string">"\n"</span>+<span class="string">"name2="</span>+name2+<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/suc.png"  alt></p>
<blockquote>
<p>相关code已上传github<br><a href="https://github.com/xhongy/Samples" target="_blank" rel="noopener">https://github.com/xhongy/Samples</a></p>
</blockquote>
<h2 id="androidstudio安装ASM插件"><a href="#androidstudio安装ASM插件" class="headerlink" title="androidstudio安装ASM插件"></a>androidstudio安装ASM插件</h2><p>打开设置，选择plugin，输入ASM关键词，选择”ASM Bytecode Viewer” 点击安装<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/asm-install1.png"  alt></p>
<p>安装成功后，重启IDE<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/asm-install-ok.png"  alt></p>
<p>androidstudio重启后在右侧就会看到ASM标识了<br><img src="/" class="lazyload" data-src="/2020/05/09/java-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/asm-show.png"  alt></p>
<p>查看效果，类右键选择”ASM Bytecode Viewer”</p>
<p>@Retention </p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>注解，反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Uni-App原生插件开发</title>
    <url>/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>uni-app混合开发框架，今天记录一下uni-app框架下android原生插件是如何开发集成的，这里以三方融云多人视频功能为例来讲，<br>因为主要是将插件的开发，融云功能自行到融云官网查看</p>
</blockquote>
<h3 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h3><h4 id="预备环境"><a href="#预备环境" class="headerlink" title="预备环境"></a>预备环境</h4><ul>
<li>JAVA环境 jdk1.7+(最优1.8)</li>
<li>Android Studio 下载地址：<a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="noopener">Android Studio官网</a> OR <a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio中文社区</a>,要求安装Android4.0或以上（API 14）SDK</li>
<li>App离线SDK下载：最新<a href="https://nativesupport.dcloud.net.cn/AppDocs/download/android" target="_blank" rel="noopener">android平台SDK下载</a></li>
</ul>
<h4 id="离线打包SDK目录说明"><a href="#离线打包SDK目录说明" class="headerlink" title="离线打包SDK目录说明"></a>离线打包SDK目录说明</h4><blockquote>
<p>HBuilder-Hello：离线打包演示应用；<br>HBuilder-Integrate: 5+ SDK 集成和插件开发示例<br>libs：SDK库文件目录；<br>Feature列表.xls：Android平台各扩展Feature API对应的permission；<br>Readme.txt：版本说明文件。</p>
</blockquote>
<h3 id="Android融云功能开发"><a href="#Android融云功能开发" class="headerlink" title="Android融云功能开发"></a>Android融云功能开发</h3><h4 id="下载融云资源"><a href="#下载融云资源" class="headerlink" title="下载融云资源"></a>下载融云资源</h4><p>创建一个android项目,下载融云多人音视频资源，<a href="https://www.rongcloud.cn/downloads" target="_blank" rel="noopener">融云</a></p>
<p>使用Android Studio File&gt;New&gt;Import Module from Source将文件夹中 CallKit CallLib IMLib IMKit 模块导入项目中。</p>
<p>在/app/build.gradle中 dependencies 节点添加依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">implementation <span class="title">project</span><span class="params">(<span class="string">':IMLib'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">project</span><span class="params">(<span class="string">':IMKit'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">project</span><span class="params">(<span class="string">':CallLib'</span>)</span></span></span><br><span class="line"><span class="function">    implementation <span class="title">project</span><span class="params">(<span class="string">':CallKit'</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h4><p>请根据项目需要在 AndroidManifest.xml 中添加权限：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 音视频需要网络权限 和 监听网络状态权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.CHANGE_NETWORK_STATE"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span><br><span class="line">&lt;!-- 摄像头采集需要 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.CAMERA"</span> /&gt;</span><br><span class="line">&lt;!-- 音频采集需要 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.RECORD_AUDIO"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span> /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="创建uni-app插件Module"><a href="#创建uni-app插件Module" class="headerlink" title="创建uni-app插件Module"></a>创建uni-app插件Module</h4><p>点击Android Studio 菜单项 File—&gt;New—&gt;New Module。完成融云多人音视频功能开发，目前目录结构是这样的,打通融云多人音视频功能</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-lists.png"  alt></p>
<h3 id="uni-app插件生成"><a href="#uni-app插件生成" class="headerlink" title="uni-app插件生成"></a>uni-app插件生成</h3><h4 id="app-libs目录下引入相关包"><a href="#app-libs目录下引入相关包" class="headerlink" title="./app/libs目录下引入相关包"></a>./app/libs目录下引入相关包</h4><p>（包文件在下载的5+sdkd libs目录下面）</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-lib.png"  alt></p>
<h4 id="修改融云module"><a href="#修改融云module" class="headerlink" title="修改融云module"></a>修改融云module</h4><p>CallKit -&gt;build.gradle文件,添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'../app/libs'</span>, include: [<span class="string">'uniapp-release.aar'</span>])</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>CallLib -&gt;build.gradle文件,添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="function">compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'../app/libs'</span>, include: [<span class="string">'uniapp-release.aar'</span>])</span></span></span><br></pre></td></tr></table></figure>

<p>IMKit -&gt;build.gradle文件,添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="function">compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'../app/libs'</span>, include: [<span class="string">'uniapp-release.aar'</span>])</span></span></span><br></pre></td></tr></table></figure>

<p>IMLib -&gt;build.gradle文件,添加如下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="function">compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'../app/libs'</span>, include: [<span class="string">'uniapp-release.aar'</span>])</span></span></span><br></pre></td></tr></table></figure>

<h4 id="rongyunplugin-gt-build-gradle文件"><a href="#rongyunplugin-gt-build-gradle文件" class="headerlink" title="rongyunplugin-&gt; build.gradle文件"></a>rongyunplugin-&gt; build.gradle文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">fileTree</span><span class="params">(include: [<span class="string">'keeplive-1.1.20.aar'</span>], dir: <span class="string">'../app/libs'</span>)</span></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">fileTree</span><span class="params">(include: [<span class="string">'lib.5plus.base-release.aar'</span>], dir: <span class="string">'../app/libs'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">fileTree</span><span class="params">(dir: <span class="string">'../app/libs'</span>, include: [<span class="string">'uniapp-release.aar'</span>])</span></span></span><br><span class="line"><span class="function">    compileOnly "com.android.support:recyclerview-v7:25.3.1"</span></span><br><span class="line"><span class="function">    compileOnly "com.android.support:support-v4:25.3.1"</span></span><br><span class="line"><span class="function">    compileOnly "com.android.support:appcompat-v7:25.3.1"</span></span><br><span class="line"><span class="function">    compileOnly 'com.alibaba:fastjson:1.1.46.android'</span></span><br><span class="line"><span class="function">    compileOnly 'com.facebook.fresco:fresco:0.12.0'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">project</span><span class="params">(path: <span class="string">':CallKit'</span>)</span></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">project</span><span class="params">(path: <span class="string">':IMKit'</span>)</span></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">project</span><span class="params">(path: <span class="string">':IMLib'</span>)</span></span></span><br><span class="line"><span class="function">    compileOnly <span class="title">project</span><span class="params">(path: <span class="string">':CallLib'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    compileOnly 'com.squareup.okhttp3:okhttp:3.10.0'</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="插件module编写"><a href="#插件module编写" class="headerlink" title="插件module编写"></a>插件module编写</h3><h4 id="创建module的入口文件UniMeetingModule"><a href="#创建module的入口文件UniMeetingModule" class="headerlink" title="创建module的入口文件UniMeetingModule"></a>创建module的入口文件<code>UniMeetingModule</code></h4><p>UniMeetingModule类需要继承WXSDKEngine.DestroyableModule类<br>编写uniapp里面调用的插件方法，记住方法必须加@JSMethod(uiThread = true)注解</p>
<figure class="highlight java"><figcaption><span>UniMeetingModule</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.rongyunplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.fanjun.keeplive.KeepLive;</span><br><span class="line"><span class="keyword">import</span> com.fanjun.keeplive.config.ForegroundNotification;</span><br><span class="line"><span class="keyword">import</span> com.fanjun.keeplive.config.ForegroundNotificationClickListener;</span><br><span class="line"><span class="keyword">import</span> com.fanjun.keeplive.config.KeepLiveService;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.WXSDKEngine;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.annotation.JSMethod;</span><br><span class="line"><span class="keyword">import</span> com.taobao.weex.bridge.JSCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.dcloud.application.DCloudApplication;</span><br><span class="line"><span class="keyword">import</span> io.rong.callkit.RongCallKit;</span><br><span class="line"><span class="keyword">import</span> io.rong.imkit.RongIM;</span><br><span class="line"><span class="keyword">import</span> io.rong.imlib.RongIMClient;</span><br><span class="line"><span class="keyword">import</span> io.rong.imlib.model.Conversation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniMeetingModule</span> <span class="keyword">extends</span> <span class="title">WXSDKEngine</span>.<span class="title">DestroyableModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"UniMeetingModule"</span>;</span><br><span class="line">    RongYunManager rongYunManager;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 融云多人音视频步骤：1：init----&gt; RongIM.init</span></span><br><span class="line"><span class="comment">	* 2：获取token---------------&gt; rongYunManager.getToken</span></span><br><span class="line"><span class="comment">	* 3： 连接融云</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="meta">@JSMethod</span>(uiThread = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joinMeetingRoom</span><span class="params">(JSONObject attr, JSCallback jsCallback)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AppContext.USER_NAME = attr.getString(<span class="string">"userName"</span>);</span><br><span class="line">        AppContext.USER_ID = attr.getString(<span class="string">"userMCUId"</span>);</span><br><span class="line">        AppContext.USER_TOKEN = attr.getString(<span class="string">"userToken"</span>);</span><br><span class="line">        AppContext.USER_HEADER = attr.getString(<span class="string">"userAvatar"</span>);</span><br><span class="line">        AppContext.APP_KEY = attr.getString(<span class="string">"appKey"</span>);</span><br><span class="line">        <span class="keyword">if</span> ((AppContext.USER_HEADER == <span class="keyword">null</span>) || (<span class="string">""</span>.equals(AppContext.USER_HEADER))) &#123;</span><br><span class="line">            AppContext.USER_HEADER = <span class="string">"https://www.baidu.com/img/bd_logo1.png?where=super"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RongIM.init(<span class="keyword">this</span>.mWXSDKInstance.getContext(), AppContext.APP_KEY);</span><br><span class="line"></span><br><span class="line">        PermissionsUtils.getInstance().requestPermissions((Activity)<span class="keyword">this</span>.mWXSDKInstance.getContext(), <span class="number">17</span>);</span><br><span class="line">        rongYunManager = RongYunManager.getInstance();</span><br><span class="line">        rongYunManager.setContext(<span class="keyword">this</span>.mWXSDKInstance.getContext());</span><br><span class="line">        AppContext.setInstance(<span class="keyword">this</span>.mWXSDKInstance.getContext());</span><br><span class="line">        rongYunManager.getToken(AppContext.USER_NAME,AppContext.USER_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSMethod</span>(uiThread = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMutilCall</span><span class="params">(JSONObject attr)</span> </span>&#123;</span><br><span class="line">        String targetId = <span class="string">"group_1"</span>;</span><br><span class="line">        RongCallKit.CallMediaType mediaType = RongCallKit.CallMediaType.CALL_MEDIA_TYPE_VIDEO;</span><br><span class="line"></span><br><span class="line">        String toUserMCUId = attr.getString(<span class="string">"groupIDs"</span>);</span><br><span class="line">        String[] split = toUserMCUId.split(<span class="string">","</span>);</span><br><span class="line">        ArrayList&lt;String&gt; userIds = <span class="keyword">new</span> ArrayList(Arrays.asList(split));</span><br><span class="line">        RongCallKit.startMultiCall(<span class="keyword">this</span>.mWXSDKInstance.getContext(), Conversation.ConversationType.GROUP, targetId, mediaType, userIds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreate();</span><br><span class="line">        AppContext.setInstance(<span class="keyword">this</span>.mWXSDKInstance.getContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>RongYunManager</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.rongyunplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.rong.callkit.MultiVideoCallActivity;</span><br><span class="line"><span class="keyword">import</span> io.rong.calllib.IRongReceivedCallListener;</span><br><span class="line"><span class="keyword">import</span> io.rong.calllib.RongCallClient;</span><br><span class="line"><span class="keyword">import</span> io.rong.calllib.RongCallSession;</span><br><span class="line"><span class="keyword">import</span> io.rong.imkit.RongIM;</span><br><span class="line"><span class="keyword">import</span> io.rong.imlib.RongIMClient;</span><br><span class="line"><span class="keyword">import</span> io.rong.imlib.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Call;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Callback;</span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RongYunManager</span> </span>&#123;</span><br><span class="line">    Context context;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"coco"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RongYunManager instance;</span><br><span class="line">    <span class="keyword">private</span> RongCallSession session;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RongYunManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> RongYunManager();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="keyword">switch</span> (msg.what)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    showToast(<span class="string">"视频通话令牌错误"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    showToast(<span class="string">"视频通话连接错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTokenError</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.what = <span class="number">3</span>;</span><br><span class="line">        handler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRongyunCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.session) &#123;</span><br><span class="line">            intent = <span class="keyword">new</span> Intent(context, MultiVideoCallActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            intent.setAction(<span class="string">"io.rong.intent.action.voip.SINGLEVIDEO"</span>);</span><br><span class="line">            intent.putExtra(<span class="string">"callAction"</span>, <span class="string">"ACTION_INCOMING_CALL"</span>);</span><br><span class="line">            intent.putExtra(<span class="string">"callSession"</span>, <span class="keyword">this</span>.session);</span><br><span class="line">            intent.putExtra(<span class="string">"conversationType"</span>, <span class="keyword">this</span>.session.getConversationType().getName());</span><br><span class="line">            intent.putExtra(<span class="string">"targetId"</span>, <span class="keyword">this</span>.session.getTargetId());</span><br><span class="line">            intent.putExtra(<span class="string">"callName"</span>, <span class="string">"指挥中心"</span>);</span><br><span class="line">            intent.addFlags(<span class="number">0</span>);</span><br><span class="line">            intent.addCategory(<span class="string">"call"</span>);</span><br><span class="line">            context.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rongyunUserInfor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo(AppContext.USER_ID, AppContext.USER_NAME, Uri.parse(AppContext.USER_HEADER));</span><br><span class="line">        RongIM.getInstance().refreshUserInfoCache(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createCallBackListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RongCallClient.getInstance().setReceivedCallListener(<span class="keyword">new</span> IRongReceivedCallListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedCall</span><span class="params">(RongCallSession callSession)</span> </span>&#123;</span><br><span class="line">                Log.e(RongYunManager.<span class="keyword">this</span>.TAG, <span class="string">"onReceivedCall="</span>+callSession.getCallerUserId());</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.session = callSession;</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.showRongyunCall();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckPermission</span><span class="params">(RongCallSession callSession)</span> </span>&#123;</span><br><span class="line">                Log.d(RongYunManager.<span class="keyword">this</span>.TAG, <span class="string">"onCheckPermission="</span>+callSession.getCallId());</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.session = callSession;</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.showRongyunCall();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">            handler = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (RongIMClient.getInstance().getCurrentConnectionStatus().equals(RongIMClient.ConnectionStatusListener.ConnectionStatus.CONNECTED)) &#123;</span><br><span class="line">            RongIMClient.getInstance().disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectRyServer</span><span class="params">(<span class="keyword">final</span> String token)</span> </span>&#123;</span><br><span class="line">        RongIM.connect(token, <span class="keyword">new</span> RongIMClient.ConnectCallback() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTokenIncorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.e(RongYunManager.<span class="keyword">this</span>.TAG, <span class="string">"onTokenIncorrect"</span>);</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.onTokenError(token);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String userid)</span> </span>&#123;</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.rongyunUserInfor();</span><br><span class="line">                RongYunManager.<span class="keyword">this</span>.createCallBackListener();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(RongIMClient.ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                message.what = <span class="number">4</span>;</span><br><span class="line">                handler.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//////////////////</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getToken</span><span class="params">(String username, String yhid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuffer res = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"https://api.cn.ronghub.com/user/getToken.json"</span>;</span><br><span class="line"></span><br><span class="line">        String App_Key = <span class="string">"*****"</span>; <span class="comment">//开发者平台分配的 App Key。</span></span><br><span class="line"></span><br><span class="line">        String App_Secret = <span class="string">"JV0BcmBPvE4Su"</span>;</span><br><span class="line"></span><br><span class="line">        String Timestamp = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);<span class="comment">//时间戳，从 1970 年 1 月 1 日 0 点 0 分 0 秒开始到现在的秒数。</span></span><br><span class="line"></span><br><span class="line">        String Nonce = String.valueOf(Math.floor(Math.random() * <span class="number">1000000</span>));<span class="comment">//随机数，无长度限制。</span></span><br><span class="line"></span><br><span class="line">        String Signature = sha1(App_Secret + Nonce + Timestamp);<span class="comment">//数据签名。</span></span><br><span class="line">        <span class="comment">//post请求</span></span><br><span class="line">        FormBody formBody = <span class="keyword">new</span> FormBody.Builder().add(<span class="string">"userId"</span>, username).add(<span class="string">"name"</span>, yhid).build();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).</span><br><span class="line">                addHeader(<span class="string">"App-Key"</span>, App_Key)</span><br><span class="line">                .addHeader(<span class="string">"Timestamp"</span>, Timestamp)</span><br><span class="line">                .addHeader(<span class="string">"Nonce"</span>, Nonce)</span><br><span class="line">                .addHeader(<span class="string">"Signature"</span>, Signature)</span><br><span class="line">                .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">                .post(formBody).build();</span><br><span class="line"></span><br><span class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"coco"</span>, <span class="string">"onFailure="</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, okhttp3.Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (response.code() &gt;= <span class="number">200</span> &amp;&amp; response.code() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        JSONObject responseobj = <span class="keyword">new</span> JSONObject(response.body().string());</span><br><span class="line">                        Log.d(<span class="string">"coco"</span>, responseobj.getString(<span class="string">"token"</span>));</span><br><span class="line"><span class="comment">//                        token = responseobj.getString("token");</span></span><br><span class="line">                        connectRyServer(responseobj.getString(<span class="string">"token"</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SHA1加密//http://www.rongcloud.cn/docs/server.html#通用_API_接口签名规则</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">sha1</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line"></span><br><span class="line">            md.update(data.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bits = md.digest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bits.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> a = bits[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a &lt; <span class="number">0</span>) a += <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a &lt; <span class="number">16</span>) buf.append(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">                buf.append(Integer.toHexString(a));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>PermissionsUtils</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.rongyunplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTCODE_PHONE = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PermissionsUtils instance;</span><br><span class="line">    <span class="keyword">private</span> String[] arr = &#123; <span class="string">"android.permission.CAMERA"</span>, <span class="string">"android.permission.RECORD_AUDIO"</span>, <span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>, <span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>, <span class="string">"android.permission.READ_PHONE_STATE"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PermissionsUtils <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (PermissionsUtils<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> PermissionsUtils();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isNeed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">requestPermissions</span><span class="params">(Activity activity, <span class="keyword">int</span> requestcodePhone)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String res : <span class="keyword">this</span>.arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(activity, res) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.isNeed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isNeed)</span><br><span class="line">        &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(activity, <span class="keyword">this</span>.arr, requestcodePhone);</span><br><span class="line">            <span class="keyword">this</span>.isNeed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(<span class="string">"res"</span>, <span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>AppContext</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.coco.rongyunplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_NAME = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_ID = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_TOKEN = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String USER_HEADER = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String APP_KEY = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInstance</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        instance = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dcloud-uniplugins-json-文件"><a href="#dcloud-uniplugins-json-文件" class="headerlink" title="dcloud_uniplugins.json 文件"></a>dcloud_uniplugins.json 文件</h3><p>在.\app\src\main\assets目录下面新建dcloud_uniplugins.json 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"nativePlugins"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"hooksClass"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"plugins"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"rongyunplugin"</span>, <span class="comment">//`插件名`</span></span><br><span class="line">          <span class="string">"class"</span>: <span class="string">"cn.coco.rongyunplugin.UniMeetingModule"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>dcloud_uniplugins.json说明:<br>nativePlugins： 插件跟节点 可存放多个插件<br>hooksClass： 生命周期代理（实现AppHookProxy接口类）格式(完整包名加类名)<br>name : 注册名称，<br>class : module 或 component 实体类完整名称<br>type : module 或 component类型。</p>
</blockquote>
<h3 id="Uniapp引入创建的插件"><a href="#Uniapp引入创建的插件" class="headerlink" title="Uniapp引入创建的插件"></a>Uniapp引入创建的插件</h3><h4 id="生成arr文件"><a href="#生成arr文件" class="headerlink" title="生成arr文件"></a>生成arr文件</h4><p>双击gradle下面的assembleRelease，下图展示了所生成的aar文件路径</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-gradle.png"  alt></p>
<h4 id="集成到uni-app"><a href="#集成到uni-app" class="headerlink" title="集成到uni-app"></a>集成到uni-app</h4><p>在uni-app项目根目录下面创建nativeplugins文件夹</p>
<p>在此目录下面创建与插件同名的目录，因为目前只做了android端的插件封装，创建android的目录，将之前生成的aar文件放到android目录下面，结果如下图所示</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-uniapp-native.png"  alt></p>
<h4 id="完善package-json文件"><a href="#完善package-json文件" class="headerlink" title="完善package.json文件"></a>完善package.json文件</h4><p>内容配置详见后面说明，配置后内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">"rongyunplugin"</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">"rongyunplugin"</span>,</span><br><span class="line">	<span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">"视频会议"</span>,</span><br><span class="line">	<span class="string">"_dp_type"</span>: <span class="string">"nativeplugin"</span>,</span><br><span class="line">	<span class="string">"_dp_nativeplugin"</span>: &#123;</span><br><span class="line">		<span class="string">"android"</span>: &#123;</span><br><span class="line">			<span class="string">"plugins"</span>: [&#123;</span><br><span class="line">				<span class="string">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">				<span class="string">"name"</span>: <span class="string">"rongyunplugin"</span>,</span><br><span class="line">				<span class="string">"class"</span>: <span class="string">"cn.coco.rongyunplugin.UniMeetingModule"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="string">"integrateType"</span>: <span class="string">"aar"</span>,</span><br><span class="line">			<span class="string">"dependencies"</span>: [</span><br><span class="line">				<span class="string">"com.squareup.okhttp3:okhttp:3.10.0"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">"permissions"</span>: [</span><br><span class="line">				<span class="string">"android.permission.INTERNET"</span>,</span><br><span class="line">				<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>,</span><br><span class="line">				<span class="string">"android.permission.CHANGE_NETWORK_STATE"</span>,</span><br><span class="line">				<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>,</span><br><span class="line">				<span class="string">"android.permission.CAMERA"</span>,</span><br><span class="line">				<span class="string">"android.permission.RECORD_AUDIO"</span>,</span><br><span class="line">				<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">"minSdkVersion"</span>: <span class="string">"16"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Uniapp里原生插件的调用"><a href="#Uniapp里原生插件的调用" class="headerlink" title="Uniapp里原生插件的调用"></a>Uniapp里原生插件的调用</h3><h4 id="声明并调用插件"><a href="#声明并调用插件" class="headerlink" title="声明并调用插件"></a>声明并调用插件</h4><p>const pluginNative = uni.requireNativePlugin(‘rongyunplugin’);<br>// 调用插件里面的方法<br>pluginNative.*();</p>
<h4 id="插件引入"><a href="#插件引入" class="headerlink" title="插件引入"></a>插件引入</h4><p>打开manifest.json文件，填写相关配置,操作如下</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-mainfest.png"  alt></p>
<h3 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h3><h4 id="制作自定义基座"><a href="#制作自定义基座" class="headerlink" title="制作自定义基座"></a>制作自定义基座</h4><p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-jizuo.png"  alt></p>
<p>配置相关信息后点击打包,填写报名与签名文件</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-jizuo-info.png"  alt></p>
<p>打包成功后显示如下,此时可以将生产的apk文件安装到手机运行了。</p>
<p><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-dabao-ok.png"  alt></p>
<h3 id="连接真机联调"><a href="#连接真机联调" class="headerlink" title="连接真机联调"></a>连接真机联调</h3><p>制作自定义基座成功后，就可以连接真机继续测试了</p>
<p>选择自定义调试基座<br><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-sel-customer.png"  alt></p>
<p>选择所连接的设备<br><img src="/" class="lazyload" data-src="/2020/04/28/Uni-App%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/img-sel-device.png"  alt></p>
<p>Ok，到此融云多人音视频功能原生android插件就开发完成了！</p>
<h3 id="Package-json配置说明"><a href="#Package-json配置说明" class="headerlink" title="Package.json配置说明"></a>Package.json配置说明</h3><p>uni-app原生插件描述文件，完整格式如下<br>注：如果只有一端比如只包含android插件，请把ios节点删除掉，不能直接注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"插件名称"</span>,  </span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"插件标识"</span>,  </span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"插件版本号"</span>,  </span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"插件描述信息"</span>,  </span><br><span class="line">    <span class="string">"_dp_type"</span>:<span class="string">"nativeplugin"</span>,  </span><br><span class="line">    <span class="string">"_dp_nativeplugin"</span>:&#123;  </span><br><span class="line">        <span class="string">"android"</span>: &#123;  </span><br><span class="line">            <span class="string">"plugins"</span>: [  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"module|component, 必填, 根据插件类型选择"</span>,  </span><br><span class="line">                    <span class="string">"name"</span>: <span class="string">"必填, 注册插件的名称, 通常与插件标识一致"</span>,  </span><br><span class="line">                    <span class="string">"class"</span>: <span class="string">"必填, 注册插件的类名"</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"hooksClass"</span>: <span class="string">"可选, 事件钩子注册类名"</span>,  </span><br><span class="line">            <span class="string">"integrateType"</span>: <span class="string">"必填, 可取值aar|jar"</span>,  </span><br><span class="line">            <span class="string">"dependencies"</span>: [  </span><br><span class="line">                <span class="string">"可选, 依赖的库名称"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"compileOptions"</span>: &#123;  <span class="comment">//可选，Java编译参数配置  </span></span><br><span class="line">                <span class="string">"sourceCompatibility"</span>: <span class="string">"1.8"</span>,  </span><br><span class="line">                <span class="string">"targetCompatibility"</span>: <span class="string">"1.8"</span>  </span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="string">"abis"</span>: [  </span><br><span class="line">                <span class="string">"可选, 支持的abi类型, 可取值armeabi-v7a|arm64-v8a|x86"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"minSdkVersion"</span>: <span class="string">"可选，支持的Android最低版本，如21"</span>,  </span><br><span class="line">            <span class="string">"permissions"</span>: [  </span><br><span class="line">                <span class="string">"可选, 要使用的Android权限列表"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"parameters"</span>: &#123;  </span><br><span class="line">                <span class="string">"插件需要配置的参数名称, 如appid"</span>: &#123;  </span><br><span class="line">                    <span class="string">"des"</span>: <span class="string">"参数描述"</span>,  </span><br><span class="line">                    <span class="string">"key"</span>: <span class="string">"AndroidManifest.xml中添加meta-data节点的android:name属性值, 如GETUI_APPID"</span>,  </span><br><span class="line">                    <span class="string">"placeholder"</span>: <span class="string">"build.gradle中添加到manifestPlaceholders中的字段名"</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="string">"ios"</span>: &#123;  </span><br><span class="line">            <span class="string">"plugins"</span>: [  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="string">"type"</span>: <span class="string">"必填, module|component, 根据插件类型选择"</span>,  </span><br><span class="line">                    <span class="string">"name"</span>: <span class="string">"必填, 注册插件的名称, 通常与插件标识一致"</span>,  </span><br><span class="line">                    <span class="string">"class"</span>: <span class="string">"必填, 注册插件的类名"</span>   </span><br><span class="line">                &#125;  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"integrateType"</span>: <span class="string">"必填, 可取值framework|library"</span>,  </span><br><span class="line">            <span class="string">"hooksClass"</span>: <span class="string">"可选, 事件钩子注册类名"</span>,  </span><br><span class="line">            <span class="string">"frameworks"</span>: [  </span><br><span class="line">                <span class="string">"可选, 依赖的系统库(系统库有.framework和.tbd和.dylib类型)，和第三方.framework动态库（.framework动态库也需要在这里配置）;（第三方 .a 库或 .framework**静态库**直接放到ios根目录即可，不需要配置）"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"embedFrameworks"</span>: [  </span><br><span class="line">                <span class="string">"可选，依赖的.framework动态库，（注意.framework动态库也需要在上面的 frameworks 节点添加配置，同样将动态库.framework文件放到 ios 根目录中）"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"capabilities"</span>: &#123;    <span class="comment">// 配置应用的capabilities数据（根据XCode规范分别配置到entitlements和plist文件中）  </span></span><br><span class="line">                <span class="string">"entitlements"</span>: &#123;    <span class="comment">// 合并到工程entitlements文件的数据（json格式）  </span></span><br><span class="line">                &#125;,  </span><br><span class="line">                <span class="string">"plists"</span>: &#123;    <span class="comment">// 合并到工程Info.plist文件的数据（json格式）  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="string">"plists"</span>: &#123;    <span class="comment">// 自定义配置工程Info.plist文件的数据（json格式），优先级高于capabilities-&gt;plists  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="string">"resources"</span>: [  </span><br><span class="line">                <span class="string">"可选, 插件要使用的资源文件列表，相对于ios目录的路径"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"assets"</span>: [    <span class="comment">//HBuilderX2.3.4及以上版本支持  </span></span><br><span class="line">                <span class="string">"可选，插件要使用的xcassets文件列表，相对于ios目录的路径"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"privacies"</span>: [  </span><br><span class="line">                <span class="string">"可选, 插件使用到的隐私列表，如NSPhotoLibraryUsageDescription"</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"deploymentTarget"</span>: <span class="string">"8.0, 可选，支持的iOS最低版本"</span>,  </span><br><span class="line">            <span class="string">"validArchitectures"</span>: [    <span class="comment">// 可选，支持的CPU架构类型  </span></span><br><span class="line">                <span class="string">"arm64"</span>    <span class="comment">//支持多个值，可取值：arm64 arm64e armv7 armv7s x86_64  </span></span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">"parameters"</span>: &#123;  </span><br><span class="line">                <span class="string">"插件需要配置的参数名称, 如appid"</span>: &#123;  </span><br><span class="line">                    <span class="string">"des"</span>: <span class="string">"参数描述信息"</span>,  </span><br><span class="line">                    <span class="string">"key"</span>: <span class="string">"参数需要配置到info.plist中的键名, 嵌套时使用:分割，如getui:appid"</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p><a href="https://nativesupport.dcloud.net.cn/NativePlugin/course/android" target="_blank" rel="noopener">原生插件开发教程</a><br><a href="https://ask.dcloud.net.cn/article/35416" target="_blank" rel="noopener">Android平台原生插件开发教程参考</a></p>
]]></content>
      <categories>
        <category>uni-app</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>uni-app插件</tag>
      </tags>
  </entry>
</search>
